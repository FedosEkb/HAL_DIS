
HAL_DIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002324  08002324  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002324  08002324  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002324  08002324  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002324  08002324  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002328  08002328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800232c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000068  08002394  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002394  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a01  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efe  00000000  00000000  00024a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00025998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000440  00000000  00000000  00025e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c80  00000000  00000000  00026290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dfa  00000000  00000000  0003ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb92  00000000  00000000  00043d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d289c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001310  00000000  00000000  000d28f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800230c 	.word	0x0800230c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800230c 	.word	0x0800230c

080001c8 <hal_spi_configure_phase_and_polarity>:
 * @param  phase : configures phase ,
 * @param  polarity : configures polarity
 * @retval None
 */
void hal_spi_configure_phase_and_polarity(SPI_TypeDef *SPIx,
		uint32_t phase_value, uint32_t polarity) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	if (phase_value) {
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d006      	beq.n	80001e8 <hal_spi_configure_phase_and_polarity+0x20>
		SPIx->CR1 |= SPI_REG_CR1_CPHA;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0201 	orr.w	r2, r3, #1
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	e005      	b.n	80001f4 <hal_spi_configure_phase_and_polarity+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPHA;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f023 0201 	bic.w	r2, r3, #1
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	601a      	str	r2, [r3, #0]
	}
	if (polarity) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d006      	beq.n	8000208 <hal_spi_configure_phase_and_polarity+0x40>
		SPIx->CR1 |= SPI_REG_CR1_CPOL;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0202 	orr.w	r2, r3, #2
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
	}
}
 8000206:	e005      	b.n	8000214 <hal_spi_configure_phase_and_polarity+0x4c>
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f023 0202 	bic.w	r2, r3, #2
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <hal_spi_configure_device_mode>:
 * @brief  Configures master or slave mode
 * @param  *SPIx : Base address of the SPI
 * @param  master : if 1 , then configured for master
 * @retval None
 */
void hal_spi_configure_device_mode(SPI_TypeDef *SPIx, uint32_t master) {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	if (master) {
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d006      	beq.n	800023e <hal_spi_configure_device_mode+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_MSTR;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f043 0204 	orr.w	r2, r3, #4
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
	}
}
 800023c:	e005      	b.n	800024a <hal_spi_configure_device_mode+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f023 0204 	bic.w	r2, r3, #4
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <hal_spi_configure_datasize>:
 * @param  datasize : data size to be configured  ,
 * @param  lsbmsbfirst : if 1, LSB will be sent first.
 * @retval None
 */
void hal_spi_configure_datasize(SPI_TypeDef *SPIx, uint32_t datasize_16,
		uint32_t lsbfirst) {
 8000256:	b480      	push	{r7}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	60f8      	str	r0, [r7, #12]
 800025e:	60b9      	str	r1, [r7, #8]
 8000260:	607a      	str	r2, [r7, #4]
	if (datasize_16) {
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d006      	beq.n	8000276 <hal_spi_configure_datasize+0x20>
		SPIx->CR1 |= SPI_REG_CR1_DFF;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	e005      	b.n	8000282 <hal_spi_configure_datasize+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_DFF;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]
	}
	if (lsbfirst) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d006      	beq.n	8000296 <hal_spi_configure_datasize+0x40>
		SPIx->CR1 |= SPI_CR1_LSBFIRST;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
	}
}
 8000294:	e005      	b.n	80002a2 <hal_spi_configure_datasize+0x4c>
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <hal_spi_configure_nss_master>:
 * @brief  Configures the NSS pin of the master
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_master(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00c      	beq.n	80002d8 <hal_spi_configure_nss_master+0x2a>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	601a      	str	r2, [r3, #0]
		SPIx->CR1 |= SPI_REG_CR1_SSI;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}
}
 80002d6:	e005      	b.n	80002e4 <hal_spi_configure_nss_master+0x36>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <hal_spi_configure_nss_slave>:
 * @brief  Configures the NSS pin of the slave
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_slave(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d006      	beq.n	800030e <hal_spi_configure_nss_slave+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}

}
 800030c:	e005      	b.n	800031a <hal_spi_configure_nss_slave+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <hal_spi_configure_baudrate>:
 * @brief  Configures SPI baudrate
 * @param  *SPIx : Base address of the SPI
 * @param  pre_scalar_value : pre scalar value to be used to generate baudrate
 * @retval None
 */
void hal_spi_configure_baudrate(SPI_TypeDef *SPIx, uint32_t pre_scalar_value) {
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
	if (pre_scalar_value > 7)
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2b07      	cmp	r3, #7
 8000334:	d904      	bls.n	8000340 <hal_spi_configure_baudrate+0x1a>
		SPIx->CR1 |= (0x00 << 3); //if pre_scalar_value > 7,then use default . that is 0
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	601a      	str	r2, [r3, #0]
	else
		SPIx->CR1 |= (pre_scalar_value << 3);
}
 800033e:	e006      	b.n	800034e <hal_spi_configure_baudrate+0x28>
		SPIx->CR1 |= (pre_scalar_value << 3);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	431a      	orrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <hal_spi_configure_direction>:
 * @brief  Configures SPI direction
 * @param  *SPIx : Base address of the SPI
 * @param  direction : if 1, direction will be single line bi-directional else, 2 lines uni directional
 * @retval None
 */
void hal_spi_configure_direction(SPI_TypeDef *SPIx, uint32_t direction) {
 800035a:	b480      	push	{r7}
 800035c:	b083      	sub	sp, #12
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]
	if (direction) {
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d006      	beq.n	8000378 <hal_spi_configure_direction+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_BIDIMODE;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
	}
}
 8000376:	e005      	b.n	8000384 <hal_spi_configure_direction+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <hal_spi_disable_txe_interrupt>:
/*
 * @brief  Disables the Tx buffer empty interrupt (TXE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_txe_interrupt(SPI_TypeDef *SPIx) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_TXEIE_ENABLE;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	605a      	str	r2, [r3, #4]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <hal_spi_disable_rxne_interrupt>:
/*
 * @brief  Disables the RX buffer non empty interrupt (RXNE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_rxne_interrupt(SPI_TypeDef *SPIx) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_RXNEIE_ENABLE;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	605a      	str	r2, [r3, #4]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <hal_spi_init>:
/*
 * @brief  API used to do initialize the given SPI device
 * @param  *spi_handle : Pointer to SPI init structure
 * @retval void
 */
void hal_spi_init(spi_handle_t *spi_handle) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	/* configure the phase and polartiy */
	hal_spi_configure_phase_and_polarity(spi_handle->Instance,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6959      	ldr	r1, [r3, #20]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	691b      	ldr	r3, [r3, #16]
 80003e4:	461a      	mov	r2, r3
 80003e6:	f7ff feef 	bl	80001c8 <hal_spi_configure_phase_and_polarity>
			spi_handle->Init.CLKPhase, spi_handle->Init.CLKPolarity);

	/* Configure the spi device mode */
	hal_spi_configure_device_mode(spi_handle->Instance, spi_handle->Init.Mode);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	4619      	mov	r1, r3
 80003f4:	4610      	mov	r0, r2
 80003f6:	f7ff ff13 	bl	8000220 <hal_spi_configure_device_mode>

	/* Configure the spi data size */
	hal_spi_configure_datasize(spi_handle->Instance, spi_handle->Init.DataSize,
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6818      	ldr	r0, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68d9      	ldr	r1, [r3, #12]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	461a      	mov	r2, r3
 8000408:	f7ff ff25 	bl	8000256 <hal_spi_configure_datasize>
			spi_handle->Init.FirstBit);

	/* Configure the slave select line */
	if (spi_handle->Init.Mode == SPI_MASTER_MODE_SEL)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d108      	bne.n	8000426 <hal_spi_init+0x56>
		hal_spi_configure_nss_master(spi_handle->Instance,
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4619      	mov	r1, r3
 800041e:	4610      	mov	r0, r2
 8000420:	f7ff ff45 	bl	80002ae <hal_spi_configure_nss_master>
 8000424:	e007      	b.n	8000436 <hal_spi_init+0x66>
				spi_handle->Init.NSS);
	else
		hal_spi_configure_nss_slave(spi_handle->Instance, spi_handle->Init.NSS);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4619      	mov	r1, r3
 8000430:	4610      	mov	r0, r2
 8000432:	f7ff ff5d 	bl	80002f0 <hal_spi_configure_nss_slave>

	/* Configure the  SPI deivce speed */
	hal_spi_configure_baudrate(spi_handle->Instance,
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4619      	mov	r1, r3
 8000440:	4610      	mov	r0, r2
 8000442:	f7ff ff70 	bl	8000326 <hal_spi_configure_baudrate>
			spi_handle->Init.BaudRatePrescaler);

	/* Configure the SPI device direction */
	hal_spi_configure_direction(spi_handle->Instance,
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4619      	mov	r1, r3
 8000450:	4610      	mov	r0, r2
 8000452:	f7ff ff82 	bl	800035a <hal_spi_configure_direction>
			spi_handle->Init.Direction);
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <hal_spi_is_bus_busy>:
/*
 * @brief  Checks whether bus is free or busy
 * @param  *SPIx : Base address of the SPI
 * @retval return 1, if bus is busy
 */
uint8_t hal_spi_is_bus_busy(SPI_TypeDef *SPIx) {
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
	if (SPIx->SR & SPI_REG_SR_BUSY_FLAG) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <hal_spi_is_bus_busy+0x18>
		return SPI_IS_BUSY;
 8000472:	2301      	movs	r3, #1
 8000474:	e000      	b.n	8000478 <hal_spi_is_bus_busy+0x1a>
	} else
		return SPI_IS_NOT_BUSY;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <hal_spi_tx_close_interrupt>:
 * @brief   close Tx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_tx_close_interrupt(spi_handle_t *hspi) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	/* Disable TXE interrupt */
	hal_spi_disable_txe_interrupt(hspi->Instance);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff7d 	bl	8000390 <hal_spi_disable_txe_interrupt>

	/* if master and if driver state is not HAL_SPI_STATE_BUSY_RX then make state = READY */
	if (hspi->Init.Mode && (hspi->State != HAL_SPI_STATE_BUSY_RX))
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d008      	beq.n	80004b0 <hal_spi_tx_close_interrupt+0x2c>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80004a4:	2b22      	cmp	r3, #34	; 0x22
 80004a6:	d003      	beq.n	80004b0 <hal_spi_tx_close_interrupt+0x2c>
		hspi->State = HAL_SPI_STATE_READY;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2201      	movs	r2, #1
 80004ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <hal_spi_handle_tx_interrupt>:
 *               the configuration information for SPI module.
 * @retval void
 */


void hal_spi_handle_tx_interrupt(spi_handle_t *hspi) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Transmit data in 8 Bit mode */
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d10f      	bne.n	80004e8 <hal_spi_handle_tx_interrupt+0x30>
		hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004cc:	1c59      	adds	r1, r3, #1
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	6251      	str	r1, [r2, #36]	; 0x24
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60da      	str	r2, [r3, #12]
		hspi->TxXferCount--; //we sent 1 byte
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004de:	3b01      	subs	r3, #1
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80004e6:	e010      	b.n	800050a <hal_spi_handle_tx_interrupt+0x52>
	} else { /* Transmit data in 16 Bit mode */
		hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += 2;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f8:	1c9a      	adds	r2, r3, #2
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->TxXferCount -= 2; //we sent 2 bytes in one go
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000502:	3b02      	subs	r3, #2
 8000504:	b29a      	uxth	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	if (hspi->TxXferCount == 0) /* we reached end of transmission, so close the txe interrupt */
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800050e:	2b00      	cmp	r3, #0
 8000510:	d102      	bne.n	8000518 <hal_spi_handle_tx_interrupt+0x60>
		hal_spi_tx_close_interrupt(hspi);
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ffb6 	bl	8000484 <hal_spi_tx_close_interrupt>

}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <hal_spi_close_rx_interrupt>:
 * @brief   close Rx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_close_rx_interrupt(spi_handle_t *hspi) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	while (hal_spi_is_bus_busy(hspi->Instance))
 8000528:	bf00      	nop
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff95 	bl	800045e <hal_spi_is_bus_busy>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f7      	bne.n	800052a <hal_spi_close_rx_interrupt+0xa>
		; /* Disable RXNE interrupt */

	hal_spi_disable_rxne_interrupt(hspi->Instance);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff36 	bl	80003b0 <hal_spi_disable_rxne_interrupt>
	hspi->State = HAL_SPI_STATE_READY;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2201      	movs	r2, #1
 8000548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <hal_spi_handle_rx_interrupt>:
 * @brief   handles  RXNE interrupt
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_handle_rx_interrupt(spi_handle_t *hspi) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Receive data in 8 Bit mode */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d114      	bne.n	800058e <hal_spi_handle_rx_interrupt+0x3a>

		if (hspi->pRxBuffPtr) //NULL check
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000568:	2b00      	cmp	r3, #0
 800056a:	d009      	beq.n	8000580 <hal_spi_handle_rx_interrupt+0x2c>
			(*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68d8      	ldr	r0, [r3, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	1c59      	adds	r1, r3, #1
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800057c:	b2c2      	uxtb	r2, r0
 800057e:	701a      	strb	r2, [r3, #0]
		hspi->RxXferCount--;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000584:	3b01      	subs	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	865a      	strh	r2, [r3, #50]	; 0x32
 800058c:	e011      	b.n	80005b2 <hal_spi_handle_rx_interrupt+0x5e>
	} else { /* Receive data in 16 Bit mode */
		*((uint16_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000598:	b292      	uxth	r2, r2
 800059a:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += 2;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a0:	1c9a      	adds	r2, r3, #2
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->RxXferCount -= 2;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80005aa:	3b02      	subs	r3, #2
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	if (hspi->RxXferCount == 0) { /*We are done with the Rxing of data, lets close the rxne interrupt */
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d102      	bne.n	80005c0 <hal_spi_handle_rx_interrupt+0x6c>
		hal_spi_close_rx_interrupt(hspi);
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ffb0 	bl	8000520 <hal_spi_close_rx_interrupt>
	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <hal_spi_irq_handler>:
 * @brief  This function handles SPI interrupt request.
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval none
 */
void hal_spi_irq_handler(spi_handle_t *hspi) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]

	/* check to see RXNE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_RXNE_FLAG);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	/* check whether RXNEIE bit is enabled in the control register. */
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_RXNEIE_ENABLE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ee:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <hal_spi_irq_handler+0x3c>
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <hal_spi_irq_handler+0x3c>
		/* RXNE flag is set
		 * handle the RX of data bytes
		 */
		hal_spi_handle_rx_interrupt(hspi);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffa9 	bl	8000554 <hal_spi_handle_rx_interrupt>
		return;
 8000602:	e015      	b.n	8000630 <hal_spi_irq_handler+0x68>
	}

	/* check to see TXE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_TXE_FLAG);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_TXEIE_ENABLE);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <hal_spi_irq_handler+0x68>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <hal_spi_irq_handler+0x68>
		/* TXE flag is set
		 * handle the TX of data bytes
		 */
		hal_spi_handle_tx_interrupt(hspi);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff45 	bl	80004b8 <hal_spi_handle_tx_interrupt>
		return;
 800062e:	bf00      	nop
	}

}
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db0b      	blt.n	8000662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 021f 	and.w	r2, r3, #31
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <__NVIC_EnableIRQ+0x38>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100

08000674 <hal_gpio_configure_pin_mode>:
 * @param	mode			: mode to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t mode) {
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	460b      	mov	r3, r1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER &= ~(0x03 << (2 * pin_no));
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	897a      	ldrh	r2, [r7, #10]
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	2103      	movs	r1, #3
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	43d2      	mvns	r2, r2
 8000692:	401a      	ands	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	897b      	ldrh	r3, [r7, #10]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	431a      	orrs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <hal_gpio_configure_pin_otype>:
 * @param	op_type			: output type to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t op_type) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	460b      	mov	r3, r1
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (pin_no));
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	431a      	orrs	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	605a      	str	r2, [r3, #4]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <hal_gpio_configure_pin_speed>:
 * @param	speed			: speed to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t speed) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	460b      	mov	r3, r1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	897b      	ldrh	r3, [r7, #10]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	431a      	orrs	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	609a      	str	r2, [r3, #8]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <hal_gpio_configure_pin_resistor>:
 * @param	resistor		: pull up, push down, nothing
 * @retval	void
 */

static void hal_gpio_configure_pin_resistor(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t resistor) {
 8000712:	b480      	push	{r7}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	60f8      	str	r0, [r7, #12]
 800071a:	460b      	mov	r3, r1
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	817b      	strh	r3, [r7, #10]
	GPIOx->PUPDR |= (resistor << (2 * pin_no));
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	897b      	ldrh	r3, [r7, #10]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	431a      	orrs	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	60da      	str	r2, [r3, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <hal_gpio_set_alt_function>:
 * @param	pin_no			: GPIO pin number
 * @param	alt_fun_value	: alternate function to be configured
 * @retval	void
 */
void hal_gpio_set_alt_function(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint16_t alt_fun_value) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
 800074c:	4613      	mov	r3, r2
 800074e:	803b      	strh	r3, [r7, #0]
	if (pin_no <= 7)
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d80a      	bhi.n	800076c <hal_gpio_set_alt_function+0x2c>
		GPIOx->AFR[0] |= (alt_fun_value << (4 * pin_no));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6a1b      	ldr	r3, [r3, #32]
 800075a:	8839      	ldrh	r1, [r7, #0]
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	621a      	str	r2, [r3, #32]
	else
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
}
 800076a:	e00b      	b.n	8000784 <hal_gpio_set_alt_function+0x44>
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	8839      	ldrh	r1, [r7, #0]
 8000772:	887a      	ldrh	r2, [r7, #2]
 8000774:	f002 0207 	and.w	r2, r2, #7
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <hal_gpio_read_from_pin>:
 * @param	*GPIOx 			: pointer to GPIO Port base address
 * @param	pin_no			: GPIO pin number
 * @retval	uint8_t			: Value read
 */

uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
	return (uint8_t)((GPIOx->IDR >> pin_no) & 0x00000001);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	691a      	ldr	r2, [r3, #16]
 80007a0:	887b      	ldrh	r3, [r7, #2]
 80007a2:	fa22 f303 	lsr.w	r3, r2, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <hal_gpio_write_to_pin>:
 * @param	pin_no			: GPIO pin number
 * @param	value			: value to write
 * @retval	void
 */

void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value) {
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	807b      	strh	r3, [r7, #2]
 80007c6:	4613      	mov	r3, r2
 80007c8:	707b      	strb	r3, [r7, #1]
	if (value)
 80007ca:	787b      	ldrb	r3, [r7, #1]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d009      	beq.n	80007e4 <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	887a      	ldrh	r2, [r7, #2]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 80007e2:	e009      	b.n	80007f8 <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	887a      	ldrh	r2, [r7, #2]
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	615a      	str	r2, [r3, #20]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <hal_gpio_init>:

void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode); // set pin mode from input structure
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	b299      	uxth	r1, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	461a      	mov	r2, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff2a 	bl	8000674 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin,
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b299      	uxth	r1, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	461a      	mov	r2, r3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff43 	bl	80006b8 <hal_gpio_configure_pin_otype>
			gpio_pin_conf->op_type);
	hal_gpio_configure_pin_resistor(GPIOx, gpio_pin_conf->pin,
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	b299      	uxth	r1, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	461a      	mov	r2, r3
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ff67 	bl	8000712 <hal_gpio_configure_pin_resistor>
			gpio_pin_conf->pull);
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin,
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	b299      	uxth	r1, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	461a      	mov	r2, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff47 	bl	80006e4 <hal_gpio_configure_pin_speed>
			gpio_pin_conf->speed);

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <hal_gpio_configure_interrupt>:

void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	717b      	strb	r3, [r7, #5]
	EXTI->FTSR &= ~(1 << pin_no);
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000882:	400b      	ands	r3, r1
 8000884:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << pin_no);
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	2101      	movs	r1, #1
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	43d2      	mvns	r2, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000898:	400b      	ands	r3, r1
 800089a:	6093      	str	r3, [r2, #8]
	if ((edge_sel == INT_FALLING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 800089c:	797b      	ldrb	r3, [r7, #5]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d002      	beq.n	80008a8 <hal_gpio_configure_interrupt+0x48>
 80008a2:	797b      	ldrb	r3, [r7, #5]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d109      	bne.n	80008bc <hal_gpio_configure_interrupt+0x5c>
		EXTI->FTSR |= (1 << pin_no);
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	60d3      	str	r3, [r2, #12]
	if ((edge_sel == INT_RISING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <hal_gpio_configure_interrupt+0x68>
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d109      	bne.n	80008dc <hal_gpio_configure_interrupt+0x7c>
		EXTI->RTSR |= (1 << pin_no);
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6093      	str	r3, [r2, #8]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40013c00 	.word	0x40013c00

080008ec <hal_gpio_enable_interrupt>:

void hal_gpio_enable_interrupt(uint16_t pin_no,IRQn_Type irq_no){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	460a      	mov	r2, r1
 80008f6:	80fb      	strh	r3, [r7, #6]
 80008f8:	4613      	mov	r3, r2
 80008fa:	717b      	strb	r3, [r7, #5]
	EXTI->IMR |= (1 << pin_no);
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <hal_gpio_enable_interrupt+0x38>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	4611      	mov	r1, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <hal_gpio_enable_interrupt+0x38>)
 800090c:	430b      	orrs	r3, r1
 800090e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 8000910:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe8f 	bl	8000638 <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40013c00 	.word	0x40013c00

08000928 <hal_gpio_clear_interrupt>:

void hal_gpio_clear_interrupt(uint16_t pin_no) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
	if (EXTI->PR & (1 << pin_no))
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <hal_gpio_clear_interrupt+0x3c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	88fa      	ldrh	r2, [r7, #6]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d009      	beq.n	8000958 <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin_no);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <hal_gpio_clear_interrupt+0x3c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <hal_gpio_clear_interrupt+0x3c>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6153      	str	r3, [r2, #20]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40013c00 	.word	0x40013c00

08000968 <I2C_MasterTransmit_TXE>:
  * @brief  Handle TXE flag for Master
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_MasterTransmit_TXE(i2c_handle_t *hi2c) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	/* Write data to DR */
	hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	1c59      	adds	r1, r3, #1
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	62d1      	str	r1, [r2, #44]	; 0x2c
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	611a      	str	r2, [r3, #16]
	hi2c->XferCount--;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
	if (hi2c->XferCount == 0) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d107      	bne.n	80009a4 <I2C_MasterTransmit_TXE+0x3c>
		/* Disable BUF interrupt */
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009a2:	605a      	str	r2, [r3, #4]
	}
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <HAL_I2C_MemTxCpltCallback>:
  * @brief  Memory Tx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_MemTxCpltCallback(i2c_handle_t *hi2c) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <HAL_I2C_MasterTxCpltCallback>:
   * @brief  Master Tx Transfer completed callbacks.
   * @param  hi2c: pointer to a i2c_handle_t structure that contains
   *         the configuration information for I2C module
   * @retval None
   */
void HAL_I2C_MasterTxCpltCallback(i2c_handle_t *hi2c) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <HAL_I2C_MemRxCpltCallback>:
  * @brief  Memory Rx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(i2c_handle_t *hi2c) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <HAL_I2C_SlaveRxCpltCallback>:
  * @brief  Slave Rx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(i2c_handle_t *hi2c) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <HAL_I2C_SlaveTxCpltCallback>:
/** @brief  Slave Tx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_SlaveTxCpltCallback(i2c_handle_t *hi2c) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <HAL_I2C_MasterRxCpltCallback>:
  * @brief  Master Rx Transfer completed callbacks.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
void HAL_I2C_MasterRxCpltCallback(i2c_handle_t *hi2c) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2C_TxCpltCallback could be implemented in the user file */
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <I2C_MasterTransmit_BTF>:
  * @brief  Handle BTF flag for Master transmitter
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval nope
  */
static void I2C_MasterTransmit_BTF(i2c_handle_t *hi2c) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00e      	beq.n	8000a56 <I2C_MasterTransmit_BTF+0x2e>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3c:	1c59      	adds	r1, r3, #1
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			hi2c->State = HAL_I2C_STATE_READY;
			HAL_I2C_MasterTxCpltCallback(hi2c); // For what purpose it here??  for callback something?
		}
	}
}
 8000a54:	e033      	b.n	8000abe <I2C_MasterTransmit_BTF+0x96>
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a64:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a74:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a84:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR1 |= I2C_REG_CR1_STOP_GEN;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a94:	601a      	str	r2, [r3, #0]
		if (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a9c:	2b32      	cmp	r3, #50	; 0x32
 8000a9e:	d107      	bne.n	8000ab0 <I2C_MasterTransmit_BTF+0x88>
			hi2c->State = HAL_I2C_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MemTxCpltCallback(hi2c);  // For what purpose it here??  for callback something?
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff81 	bl	80009b0 <HAL_I2C_MemTxCpltCallback>
}
 8000aae:	e006      	b.n	8000abe <I2C_MasterTransmit_BTF+0x96>
			hi2c->State = HAL_I2C_STATE_READY;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MasterTxCpltCallback(hi2c); // For what purpose it here??  for callback something?
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff83 	bl	80009c4 <HAL_I2C_MasterTxCpltCallback>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <I2C_MasterReceive_BTF>:
  * @brief  Handle BTF flag for Master receiver
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval nope
  */
static void I2C_MasterReceive_BTF(i2c_handle_t *hi2c) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount == 3) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d117      	bne.n	8000b06 <I2C_MasterReceive_BTF+0x40>
		/* Disable Acknowledge */
		hi2c->Instance->CR1 &= ~I2C_REG_CR1_ACK;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ae4:	601a      	str	r2, [r3, #0]

		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6918      	ldr	r0, [r3, #16]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	1c59      	adds	r1, r3, #1
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000af6:	b2c2      	uxtb	r2, r0
 8000af8:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afe:	1e5a      	subs	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
		hi2c->XferCount--;
	}
}
 8000b04:	e05d      	b.n	8000bc2 <I2C_MasterReceive_BTF+0xfc>
	} else if (hi2c->XferCount == 2) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d14a      	bne.n	8000ba4 <I2C_MasterReceive_BTF+0xde>
		hi2c->Instance->CR1 |= I2C_REG_CR1_STOP_GEN;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b1c:	601a      	str	r2, [r3, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6918      	ldr	r0, [r3, #16]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	1c59      	adds	r1, r3, #1
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000b2e:	b2c2      	uxtb	r2, r0
 8000b30:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6918      	ldr	r0, [r3, #16]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000b4c:	b2c2      	uxtb	r2, r0
 8000b4e:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b68:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b78:	605a      	str	r2, [r3, #4]
		if (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b80:	2b42      	cmp	r3, #66	; 0x42
 8000b82:	d107      	bne.n	8000b94 <I2C_MasterReceive_BTF+0xce>
			hi2c->State = HAL_I2C_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MemRxCpltCallback(hi2c);  	//callback something if it need
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff23 	bl	80009d8 <HAL_I2C_MemRxCpltCallback>
}
 8000b92:	e016      	b.n	8000bc2 <I2C_MasterReceive_BTF+0xfc>
			hi2c->State = HAL_I2C_STATE_READY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MasterRxCpltCallback(hi2c);	//callback something if it need
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff39 	bl	8000a14 <HAL_I2C_MasterRxCpltCallback>
}
 8000ba2:	e00e      	b.n	8000bc2 <I2C_MasterReceive_BTF+0xfc>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6918      	ldr	r0, [r3, #16]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	1c59      	adds	r1, r3, #1
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000bb4:	b2c2      	uxtb	r2, r0
 8000bb6:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bbc:	1e5a      	subs	r2, r3, #1
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <I2C_Slave_ADDR>:
  * @brief  Handle ADD flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_Slave_ADDR(i2c_handle_t *hi2c){
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
  /* Clear ADDR flag */
    tmpreg = hi2c->Instance->SR1;  //read SR1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	60fb      	str	r3, [r7, #12]
    tmpreg = hi2c->Instance->SR2;  //read SR2
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <hal_clear_stop_flag>:

void hal_clear_stop_flag(i2c_handle_t *hi2c) {
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	tmpreg = hi2c->Instance->SR1;      //reading from SR1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	60fb      	str	r3, [r7, #12]
	hi2c->Instance->CR1 |= I2C_REG_CR1_ENABLE_I2C;  //writing to SR1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f042 0201 	orr.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
	UNUSED(tmpreg);
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <I2C_Slave_STOPF>:
  * @brief  Handle STOPF flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_Slave_STOPF(i2c_handle_t *hi2c) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]

	/* Disable EVT, BUF and ERR interrupt */
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c30:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c40:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c50:	605a      	str	r2, [r3, #4]

	/* Clear STOPF flag */
	hal_clear_stop_flag(hi2c);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffcb 	bl	8000bee <hal_clear_stop_flag>

	/* Disable Acknowledge */
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c66:	601a      	str	r2, [r3, #0]

	hi2c->State = HAL_I2C_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	HAL_I2C_SlaveRxCpltCallback(hi2c);	//callback something if it need
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff febb 	bl	80009ec <HAL_I2C_SlaveRxCpltCallback>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <I2C_Slave_AF>:
/**
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_Slave_AF(i2c_handle_t *hi2c) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	/* Disable EVT, BUF and ERR interrupt */
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c94:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ca4:	605a      	str	r2, [r3, #4]
	hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cb4:	605a      	str	r2, [r3, #4]

	/* Clear AF flag */
	hi2c->Instance->SR1 &= ~(I2C_REG_SR1_AF_FAILURE_FLAG);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	695a      	ldr	r2, [r3, #20]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cc4:	615a      	str	r2, [r3, #20]

	/* Disable Acknowledge */
	hi2c->Instance->CR1 &= ~I2C_REG_CR1_ACK;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd4:	601a      	str	r2, [r3, #0]

	hi2c->State = HAL_I2C_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fe8e 	bl	8000a00 <HAL_I2C_SlaveTxCpltCallback>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <I2C_SlaveTransmit_TXE>:
  * @brief  Handle TXE flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveTransmit_TXE(i2c_handle_t *hi2c) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00d      	beq.n	8000d18 <I2C_SlaveTransmit_TXE+0x2c>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	1c59      	adds	r1, r3, #1
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <I2C_SlaveTransmit_BTF>:
  * @brief  Handle BTF flag for Slave transmitter
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveTransmit_BTF(i2c_handle_t *hi2c) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00d      	beq.n	8000d50 <I2C_SlaveTransmit_BTF+0x2c>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	1c59      	adds	r1, r3, #1
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <I2C_MasterReceive_RXNE>:
  * @brief  Handle RXNE flag for Master
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_MasterReceive_RXNE(i2c_handle_t *hi2c) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]

	tmp = hi2c->XferCount;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6c:	60fb      	str	r3, [r7, #12]
	if (tmp > 3) {
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d90f      	bls.n	8000d94 <I2C_MasterReceive_RXNE+0x38>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6918      	ldr	r0, [r3, #16]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000d84:	b2c2      	uxtb	r2, r0
 8000d86:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
			hi2c->State = HAL_I2C_STATE_READY;

			HAL_I2C_MasterRxCpltCallback(hi2c);
		}
	}
}
 8000d92:	e049      	b.n	8000e28 <I2C_MasterReceive_RXNE+0xcc>
	} else if ((tmp == 2) || (tmp == 3)) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d002      	beq.n	8000da0 <I2C_MasterReceive_RXNE+0x44>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d108      	bne.n	8000db2 <I2C_MasterReceive_RXNE+0x56>
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dae:	605a      	str	r2, [r3, #4]
}
 8000db0:	e03a      	b.n	8000e28 <I2C_MasterReceive_RXNE+0xcc>
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dc0:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dd0:	605a      	str	r2, [r3, #4]
		hi2c->Instance->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000de0:	605a      	str	r2, [r3, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6918      	ldr	r0, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	1c59      	adds	r1, r3, #1
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000df2:	b2c2      	uxtb	r2, r0
 8000df4:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
		if (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e06:	2b42      	cmp	r3, #66	; 0x42
 8000e08:	d107      	bne.n	8000e1a <I2C_MasterReceive_RXNE+0xbe>
			hi2c->State = HAL_I2C_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MemRxCpltCallback(hi2c);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fde0 	bl	80009d8 <HAL_I2C_MemRxCpltCallback>
}
 8000e18:	e006      	b.n	8000e28 <I2C_MasterReceive_RXNE+0xcc>
			hi2c->State = HAL_I2C_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			HAL_I2C_MasterRxCpltCallback(hi2c);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fdf6 	bl	8000a14 <HAL_I2C_MasterRxCpltCallback>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <I2C_SlaveReceive_BTF>:
  * @brief  Handle BTF flag for Slave receiver
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveReceive_BTF(i2c_handle_t *hi2c) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00e      	beq.n	8000e5e <I2C_SlaveReceive_BTF+0x2e>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6918      	ldr	r0, [r3, #16]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	1c59      	adds	r1, r3, #1
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000e50:	b2c2      	uxtb	r2, r0
 8000e52:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <I2C_SlaveReceive_RXNE>:
  * @brief  Handle RXNE flag for Slave
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static void I2C_SlaveReceive_RXNE(i2c_handle_t *hi2c) {
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	if (hi2c->XferCount != 0) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00e      	beq.n	8000e98 <I2C_SlaveReceive_RXNE+0x2e>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6918      	ldr	r0, [r3, #16]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	1c59      	adds	r1, r3, #1
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000e8a:	b2c2      	uxtb	r2, r0
 8000e8c:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_I2C_EV_IRQHandler>:
  * @brief  This function handles I2C event interrupt request.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
void HAL_I2C_EV_IRQHandler(i2c_handle_t *hi2c) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0, tmp4 = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
	/* Master mode selected */
	if ((hi2c->Instance->SR2 & I2C_REG_SR2_MSL_FLAG)) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d068      	beq.n	8000f9c <HAL_I2C_EV_IRQHandler+0xf8>
		/* I2C in mode Transmitter -----------------------------------------------*/
		if ((hi2c->Instance->SR2 & I2C_REG_SR2_TRA_FLAG)) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d030      	beq.n	8000f3a <HAL_I2C_EV_IRQHandler+0x96>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_TXE_FLAG);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eee:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f06:	60bb      	str	r3, [r7, #8]
			/* TXE set and BTF reset -----------------------------------------------*/
			if (tmp1 && tmp2 && (!tmp3)) {
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d009      	beq.n	8000f22 <HAL_I2C_EV_IRQHandler+0x7e>
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <HAL_I2C_EV_IRQHandler+0x7e>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <HAL_I2C_EV_IRQHandler+0x7e>
				I2C_MasterTransmit_TXE(hi2c);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fd24 	bl	8000968 <I2C_MasterTransmit_TXE>
 8000f20:	e0ce      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
			}
			/* BTF set -------------------------------------------------------------*/
			else if ((tmp3 && tmp4)) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80cb 	beq.w	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80c7 	beq.w	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_MasterTransmit_BTF(hi2c);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fd78 	bl	8000a28 <I2C_MasterTransmit_BTF>
			else if ((tmp3) && (tmp4)) {
				I2C_SlaveReceive_BTF(hi2c);
			}
		}
	}
}
 8000f38:	e0c2      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_RXNE_FLAG);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f44:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f50:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f68:	60bb      	str	r3, [r7, #8]
			if ((tmp1) && (tmp2) && (!tmp3)) {
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <HAL_I2C_EV_IRQHandler+0xe0>
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <HAL_I2C_EV_IRQHandler+0xe0>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <HAL_I2C_EV_IRQHandler+0xe0>
				I2C_MasterReceive_RXNE(hi2c);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff feed 	bl	8000d5c <I2C_MasterReceive_RXNE>
 8000f82:	e09d      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
			else if ((tmp3) && (tmp4)) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 809a 	beq.w	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8096 	beq.w	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_MasterReceive_BTF(hi2c);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fd96 	bl	8000ac6 <I2C_MasterReceive_BTF>
}
 8000f9a:	e091      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
		tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_ADDR_FLAG);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	617b      	str	r3, [r7, #20]
		tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb2:	613b      	str	r3, [r7, #16]
		tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_STOP_DETECTION_FLAG);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	60fb      	str	r3, [r7, #12]
		tmp4 = (hi2c->Instance->SR2 & I2C_REG_SR2_TRA_FLAG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60bb      	str	r3, [r7, #8]
		if ((tmp1) && (tmp2)) {
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_I2C_EV_IRQHandler+0x146>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <HAL_I2C_EV_IRQHandler+0x146>
			hal_gpio_write_to_pin(GPIOC, LED_BLUE, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	210f      	movs	r1, #15
 8000fdc:	483a      	ldr	r0, [pc, #232]	; (80010c8 <HAL_I2C_EV_IRQHandler+0x224>)
 8000fde:	f7ff fbec 	bl	80007ba <hal_gpio_write_to_pin>
			I2C_Slave_ADDR(hi2c);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fdf1 	bl	8000bca <I2C_Slave_ADDR>
 8000fe8:	e06a      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
		else if ((tmp3) && (tmp2)) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_I2C_EV_IRQHandler+0x15a>
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_I2C_EV_IRQHandler+0x15a>
			I2C_Slave_STOPF(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fe0f 	bl	8000c1a <I2C_Slave_STOPF>
 8000ffc:	e060      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
		else if (tmp4) {
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d02e      	beq.n	8001062 <HAL_I2C_EV_IRQHandler+0x1be>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_TXE_FLAG);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101a:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001032:	60bb      	str	r3, [r7, #8]
			if ((tmp1) && (tmp2) && (!tmp3)) {
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <HAL_I2C_EV_IRQHandler+0x1aa>
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_I2C_EV_IRQHandler+0x1aa>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <HAL_I2C_EV_IRQHandler+0x1aa>
				I2C_SlaveTransmit_TXE(hi2c);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fe50 	bl	8000cec <I2C_SlaveTransmit_TXE>
 800104c:	e038      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
			else if ((tmp3) && (tmp4)) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d035      	beq.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d032      	beq.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_SlaveTransmit_BTF(hi2c);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fe62 	bl	8000d24 <I2C_SlaveTransmit_BTF>
}
 8001060:	e02e      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
			tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_RXNE_FLAG);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106c:	617b      	str	r3, [r7, #20]
			tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_BUF_INT_ENABLE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	613b      	str	r3, [r7, #16]
			tmp3 = (hi2c->Instance->SR1 & I2C_REG_SR1_BTF_FLAG);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60fb      	str	r3, [r7, #12]
			tmp4 = (hi2c->Instance->CR2 & I2C_REG_CR2_EVT_INT_ENABLE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001090:	60bb      	str	r3, [r7, #8]
			if ((tmp1) && (tmp2) && (!tmp3)) {
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <HAL_I2C_EV_IRQHandler+0x208>
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <HAL_I2C_EV_IRQHandler+0x208>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <HAL_I2C_EV_IRQHandler+0x208>
				I2C_SlaveReceive_RXNE(hi2c);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fee0 	bl	8000e6a <I2C_SlaveReceive_RXNE>
 80010aa:	e009      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
			else if ((tmp3) && (tmp4)) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
				I2C_SlaveReceive_BTF(hi2c);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff feb9 	bl	8000e30 <I2C_SlaveReceive_BTF>
}
 80010be:	e7ff      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x21c>
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020800 	.word	0x40020800

080010cc <HAL_I2C_ErrorCallback>:
  * @param  I2cHandle: I2C handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(i2c_handle_t *I2cHandle){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	  while(1)
	  {
		  if(hal_gpio_read_from_pin(GPIOI,LED_RED)){
 80010d4:	210e      	movs	r1, #14
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <HAL_I2C_ErrorCallback+0x30>)
 80010d8:	f7ff fb5a 	bl	8000790 <hal_gpio_read_from_pin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_I2C_ErrorCallback+0x22>
			  hal_gpio_write_to_pin(GPIOI,LED_RED, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	210e      	movs	r1, #14
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_I2C_ErrorCallback+0x30>)
 80010e8:	f7ff fb67 	bl	80007ba <hal_gpio_write_to_pin>
 80010ec:	e7f2      	b.n	80010d4 <HAL_I2C_ErrorCallback+0x8>
		  }else{
			  hal_gpio_write_to_pin(GPIOI,LED_RED, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	210e      	movs	r1, #14
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <HAL_I2C_ErrorCallback+0x30>)
 80010f4:	f7ff fb61 	bl	80007ba <hal_gpio_write_to_pin>
		  if(hal_gpio_read_from_pin(GPIOI,LED_RED)){
 80010f8:	e7ec      	b.n	80010d4 <HAL_I2C_ErrorCallback+0x8>
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_I2C_ER_IRQHandler>:
  * @brief  This function handles I2C error interrupt request.
  * @param  hi2c: pointer to a i2c_handle_t structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
void HAL_I2C_ER_IRQHandler(i2c_handle_t *hi2c) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_BUS_ERROR_FLAG);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
	/* I2C Bus error interrupt occurred ----------------------------------------*/
	if ((tmp1) && (tmp2)) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d010      	beq.n	8001154 <HAL_I2C_ER_IRQHandler+0x54>
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00d      	beq.n	8001154 <HAL_I2C_ER_IRQHandler+0x54>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Clear BERR flag */
		hi2c->Instance->SR1 &= ~(I2C_REG_SR1_BUS_ERROR_FLAG);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001152:	615a      	str	r2, [r3, #20]
	}

	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_ARLO_FLAG);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115e:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	613b      	str	r3, [r7, #16]
	/* I2C Arbitration Loss error interrupt occurred ---------------------------*/
	if ((tmp1) && (tmp2)) {
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d010      	beq.n	8001194 <HAL_I2C_ER_IRQHandler+0x94>
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00d      	beq.n	8001194 <HAL_I2C_ER_IRQHandler+0x94>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	f043 0202 	orr.w	r2, r3, #2
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Clear ARLO flag */
		hi2c->Instance->SR1 &= ~(I2C_REG_SR1_ARLO_FLAG);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001192:	615a      	str	r2, [r3, #20]
	}

	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_AF_FAILURE_FLAG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	613b      	str	r3, [r7, #16]
	/* I2C Acknowledge failure error interrupt occurred ------------------------*/
	if ((tmp1) && (tmp2)) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d02a      	beq.n	8001208 <HAL_I2C_ER_IRQHandler+0x108>
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d027      	beq.n	8001208 <HAL_I2C_ER_IRQHandler+0x108>
		tmp1 = (hi2c->Instance->SR2 & I2C_REG_SR2_MSL_FLAG);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
		tmp2 = hi2c->XferCount;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	613b      	str	r3, [r7, #16]
		tmp3 = hi2c->State;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011d0:	60fb      	str	r3, [r7, #12]
		if ((!tmp1) && (tmp2 == 0) && (tmp3 == HAL_I2C_STATE_BUSY_TX)) {
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_I2C_ER_IRQHandler+0xec>
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_I2C_ER_IRQHandler+0xec>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d103      	bne.n	80011ec <HAL_I2C_ER_IRQHandler+0xec>
			I2C_Slave_AF(hi2c);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fd4a 	bl	8000c7e <I2C_Slave_AF>
 80011ea:	e00d      	b.n	8001208 <HAL_I2C_ER_IRQHandler+0x108>
		} else {
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	f043 0204 	orr.w	r2, r3, #4
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c
			/* Clear AF flag */
			hi2c->Instance->SR1 &= ~(I2C_REG_SR1_AF_FAILURE_FLAG);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001206:	615a      	str	r2, [r3, #20]
		}
	}

	tmp1 = (hi2c->Instance->SR1 & I2C_REG_SR1_OVR_FLAG);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001212:	617b      	str	r3, [r7, #20]
	tmp2 = (hi2c->Instance->CR2 & I2C_REG_CR2_ERR_INT_ENABLE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	613b      	str	r3, [r7, #16]
	/* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
	if ((tmp1) && (tmp2)) {
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d010      	beq.n	8001248 <HAL_I2C_ER_IRQHandler+0x148>
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00d      	beq.n	8001248 <HAL_I2C_ER_IRQHandler+0x148>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001230:	f043 0208 	orr.w	r2, r3, #8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
		/* Clear OVR flag */
		hi2c->Instance->SR1 &= ~(I2C_REG_SR1_OVR_FLAG);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001246:	615a      	str	r2, [r3, #20]
	}

	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00e      	beq.n	800126e <HAL_I2C_ER_IRQHandler+0x16e>
		hi2c->State = HAL_I2C_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
		hi2c->Instance->CR1 &= ~I2C_REG_CR1_POS;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001266:	601a      	str	r2, [r3, #0]

		HAL_I2C_ErrorCallback(hi2c);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff2f 	bl	80010cc <HAL_I2C_ErrorCallback>
	}
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <hal_i2c_enable_peripheral>:
/*                                                                            */
/*                      Driver exposed APIs                                   */
/*                                                                            */
/******************************************************************************/

void hal_i2c_enable_peripheral(I2C_TypeDef *i2cx) {
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
	i2cx->CR1 |= I2C_REG_CR1_ENABLE_I2C;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f043 0201 	orr.w	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <hal_i2c_set_own_address1>:

static void hal_i2c_disable_peripheral(I2C_TypeDef *i2cx) {
	i2cx->CR1 &= ~I2C_REG_CR1_ENABLE_I2C;
}

static void hal_i2c_set_own_address1(I2C_TypeDef *i2cx, uint32_t own_address) {
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
	i2cx->OAR1 &= ~(0x7f << 1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
	i2cx->OAR1 |= (own_address << 1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	609a      	str	r2, [r3, #8]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <hal_i2c_manage_clock_stretch>:

static void hal_i2c_manage_clock_stretch(I2C_TypeDef *i2cx, uint32_t no_stretch) {
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	if (no_stretch) {
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <hal_i2c_manage_clock_stretch+0x1e>
		i2cx->CR1 |= I2C_REG_CR1_NOSTRETCH;  // disabled clock stretching
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
	} else {
		i2cx->CR1 &= ~I2C_REG_CR1_NOSTRETCH;
	}
}
 80012e2:	e005      	b.n	80012f0 <hal_i2c_manage_clock_stretch+0x2a>
		i2cx->CR1 &= ~I2C_REG_CR1_NOSTRETCH;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <hal_i2c_configure_ccr>:

static void hal_i2c_configure_ccr(I2C_TypeDef *i2cx, uint32_t pclk, uint32_t clkspeed,
		uint32_t duty_cycle) {
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]

	//double Thigh, Tlow, Tpclk;
	uint32_t ccr;
	if (clkspeed <= 100000) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <hal_i2c_configure_ccr+0x80>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d809      	bhi.n	8001326 <hal_i2c_configure_ccr+0x2a>
		/* configure ccr for standard mode */
		ccr = (pclk * 1000000) / (clkspeed << 1);
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <hal_i2c_configure_ccr+0x84>)
 8001316:	fb02 f203 	mul.w	r2, r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e01d      	b.n	8001362 <hal_i2c_configure_ccr+0x66>
	} else {
		if (duty_cycle == I2C_FM_DUTY_2) {
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <hal_i2c_configure_ccr+0x46>
			ccr = (pclk * 1000000) / (3 * clkspeed);
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <hal_i2c_configure_ccr+0x84>)
 8001330:	fb02 f103 	mul.w	r1, r2, r3
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001340:	617b      	str	r3, [r7, #20]
		}
		if (duty_cycle == I2C_FM_DUTY_16BY9) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d10c      	bne.n	8001362 <hal_i2c_configure_ccr+0x66>
			/* this is to reach 400khz in fm mode */
			ccr = (pclk * 1000000) / (25 * clkspeed);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <hal_i2c_configure_ccr+0x84>)
 800134c:	fb02 f103 	mul.w	r1, r2, r3
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001360:	617b      	str	r3, [r7, #20]
		}
	}
	i2cx->CCR |= ccr;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	69da      	ldr	r2, [r3, #28]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	431a      	orrs	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	61da      	str	r2, [r3, #28]
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	000186a0 	.word	0x000186a0
 8001380:	000f4240 	.word	0x000f4240

08001384 <hal_i2c_rise_time_configuration>:

static void hal_i2c_rise_time_configuration(I2C_TypeDef *i2cx, uint32_t freqrange,
		uint32_t ClockSpeed) {
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	//  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
	uint32_t trise;
	if (ClockSpeed <= 100000) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <hal_i2c_rise_time_configuration+0x58>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d803      	bhi.n	80013a0 <hal_i2c_rise_time_configuration+0x1c>
		trise = freqrange + 1;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e00a      	b.n	80013b6 <hal_i2c_rise_time_configuration+0x32>
	} else {
		trise = (((freqrange * 300) / 1000) + 1);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <hal_i2c_rise_time_configuration+0x5c>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
	}
	i2cx->TRISE &= ~(0x3F);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	621a      	str	r2, [r3, #32]
	i2cx->TRISE |= trise;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	621a      	str	r2, [r3, #32]
}
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	000186a0 	.word	0x000186a0
 80013e0:	10624dd3 	.word	0x10624dd3

080013e4 <hal_i2c_clk_init>:

static void hal_i2c_clk_init(I2C_TypeDef *i2cx, uint32_t clkspeed, uint32_t duty_cycle) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	uint32_t pclk = I2C_PERIPHERAL_CLK_FREQ_10MHZ;
 80013f0:	230a      	movs	r3, #10
 80013f2:	617b      	str	r3, [r7, #20]
	i2cx->CR2 &= ~(0x3F);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
	i2cx->CR2 |= (0x3F & pclk);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800140a:	431a      	orrs	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	605a      	str	r2, [r3, #4]
	hal_i2c_rise_time_configuration(i2cx, pclk, clkspeed);
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	6979      	ldr	r1, [r7, #20]
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff ffb5 	bl	8001384 <hal_i2c_rise_time_configuration>
	hal_i2c_configure_ccr(i2cx, pclk, clkspeed, duty_cycle);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff ff6b 	bl	80012fc <hal_i2c_configure_ccr>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <hal_i2c_set_addressing_mode>:

static void hal_i2c_set_addressing_mode(I2C_TypeDef *i2cx, uint32_t adr_mode) {
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	if (adr_mode == I2C_ADDRMODE_10BI)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d106      	bne.n	800144c <hal_i2c_set_addressing_mode+0x1e>
		i2cx->OAR1 |= I2C_REG_OAR1_ADDRMODE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
	else
		i2cx->OAR1 &= ~I2C_REG_OAR1_ADDRMODE;
}
 800144a:	e005      	b.n	8001458 <hal_i2c_set_addressing_mode+0x2a>
		i2cx->OAR1 &= ~I2C_REG_OAR1_ADDRMODE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <hal_i2c_manage_ack>:
	} else {
		i2cx->CCR &= ~I2C_REG_CCR_DUTY;
	}
}

void hal_i2c_manage_ack(I2C_TypeDef *i2cx, uint32_t ack_noack) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	if (ack_noack == I2C_ACK_ENABLE)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <hal_i2c_manage_ack+0x1e>
		i2cx->CR1 |= I2C_REG_CR1_ACK;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
	else
		i2cx->CR1 &= ~I2C_REG_CR1_ACK;
}
 8001480:	e005      	b.n	800148e <hal_i2c_manage_ack+0x2a>
		i2cx->CR1 &= ~I2C_REG_CR1_ACK;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <hal_i2c_init>:
/*
 *  @brief Initialize the given I2C
 *  @param *handle : Handle to the I2C Peripheral, which the application wants to initialize
 *  @retval None
 */
void hal_i2c_init(i2c_handle_t *handle) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	hal_i2c_clk_init(handle->Instance, handle->Init.ClockSpeed,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f7ff ff98 	bl	80013e4 <hal_i2c_clk_init>
			handle->Init.DutyCycle);

	hal_i2c_set_addressing_mode(handle->Instance, handle->Init.AddressingMode);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7ff ffb5 	bl	800142e <hal_i2c_set_addressing_mode>

	hal_i2c_manage_ack(handle->Instance, handle->Init.ack_enable);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff ffc8 	bl	8001464 <hal_i2c_manage_ack>

	hal_i2c_manage_clock_stretch(handle->Instance, handle->Init.NoStretchMode);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f7ff fef1 	bl	80012c6 <hal_i2c_manage_clock_stretch>

	hal_i2c_set_own_address1(handle->Instance, handle->Init.OwnAddress1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fed1 	bl	8001296 <hal_i2c_set_own_address1>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <__NVIC_EnableIRQ>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <main>:
	uint8_t message3[] = "Success !! \n";
	uint8_t rx_buffer[4];
	uart_handle_t uart_handle, debug_handle;
#endif	// to prevent warning

int main(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0


	spi_gpio_init();
 800153c:	f000 f95e 	bl	80017fc <spi_gpio_init>
	led_init();  										// configure LED
 8001540:	f000 f8f4 	bl	800172c <led_init>
	i2c_gpio_init();
 8001544:	f000 f928 	bl	8001798 <i2c_gpio_init>
	uart_gpio_init();
 8001548:	f000 f99a 	bl	8001880 <uart_gpio_init>
	button_init();  /* Configure USER Button as ext interrupt throw EXTI0 */
 800154c:	f000 fab4 	bl	8001ab8 <button_init>
	uart_gpio_init();
 8001550:	f000 f996 	bl	8001880 <uart_gpio_init>
	 ******************************************************************************
	 	 	 	 	 	 	 	 	 	 SPI CONFIG
	 ******************************************************************************
	 */

	_HAL_RCC_SPI2_CLK_ENABLE();
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <main+0x1c0>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a67      	ldr	r2, [pc, #412]	; (80016f8 <main+0x1c0>)
 800155a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40

	/*fill up the SPI handle structure */
	SpiHandle.Instance				= SPI_2;
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <main+0x1c4>)
 8001562:	4a67      	ldr	r2, [pc, #412]	; (8001700 <main+0x1c8>)
 8001564:	601a      	str	r2, [r3, #0]

	SpiHandle.Init.BaudRatePrescaler = SPI_REG_CR1_BR_PCLK_DIV_32;
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <main+0x1c4>)
 8001568:	2220      	movs	r2, #32
 800156a:	61da      	str	r2, [r3, #28]
	SpiHandle.Init.Direction         = SPI_ENABLE_2_LINE_UNI_DIR;
 800156c:	4b63      	ldr	r3, [pc, #396]	; (80016fc <main+0x1c4>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
	SpiHandle.Init.CLKPhase          = SPI_SECOND_CLOCK_TRANS;
 8001572:	4b62      	ldr	r3, [pc, #392]	; (80016fc <main+0x1c4>)
 8001574:	2201      	movs	r2, #1
 8001576:	615a      	str	r2, [r3, #20]
	SpiHandle.Init.CLKPolarity       = SPI_CPOL_LOW;
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <main+0x1c4>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
	SpiHandle.Init.DataSize          = SPI_8BIT_DF_ENABLE;
 800157e:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <main+0x1c4>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
	SpiHandle.Init.FirstBit          = SPI_MSB_FIRST;
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <main+0x1c4>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
	SpiHandle.Init.NSS               = SPI_SSM_ENABLE;
 800158a:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <main+0x1c4>)
 800158c:	2201      	movs	r2, #1
 800158e:	619a      	str	r2, [r3, #24]
	SpiHandle.Init.Mode              = SPI_SLAVE_MODE_SEL;
 8001590:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <main+0x1c4>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]

	SpiHandle.State = HAL_SPI_STATE_READY;
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <main+0x1c4>)
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Call driver API to initialize the SPI device */
	hal_spi_init(&SpiHandle);
 800159e:	4857      	ldr	r0, [pc, #348]	; (80016fc <main+0x1c4>)
 80015a0:	f7fe ff16 	bl	80003d0 <hal_spi_init>

	/* Enable the IRQs in the NVIC */
	NVIC_EnableIRQ(SPI2_IRQn);
 80015a4:	2024      	movs	r0, #36	; 0x24
 80015a6:	f7ff ffa9 	bl	80014fc <__NVIC_EnableIRQ>
	/**
	 ******************************************************************************
	 	 	 	 	 	 	 	 	 	I2C CONFIG
	 ******************************************************************************
	 */
	_HAL_RCC_I2C1_CLK_ENABLE();
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <main+0x1c0>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <main+0x1c0>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
	i2c_handle.Instance = I2C_1;        // base address in memory
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <main+0x1cc>)
 80015b8:	4a53      	ldr	r2, [pc, #332]	; (8001708 <main+0x1d0>)
 80015ba:	601a      	str	r2, [r3, #0]
	i2c_handle.Init.ack_enable = I2C_ACK_ENABLE;
 80015bc:	4b51      	ldr	r3, [pc, #324]	; (8001704 <main+0x1cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
	i2c_handle.Init.AddressingMode = I2C_ADDRMODE_7BIT;
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <main+0x1cc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
	i2c_handle.Init.ClockSpeed = 100000;
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <main+0x1cc>)
 80015ca:	4a50      	ldr	r2, [pc, #320]	; (800170c <main+0x1d4>)
 80015cc:	605a      	str	r2, [r3, #4]
	i2c_handle.Init.DutyCycle = I2C_FM_DUTY_2; //care needs to taken
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <main+0x1cc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
	i2c_handle.Init.GeneralCallMode = 0;
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <main+0x1cc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
	i2c_handle.Init.NoStretchMode = I2C_ENABLE_CLK_STRETCH;
 80015da:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <main+0x1cc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
	i2c_handle.Init.OwnAddress1 = SLAVE_OWN_ADDRESS	;
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <main+0x1cc>)
 80015e2:	2253      	movs	r2, #83	; 0x53
 80015e4:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(I2Cx_ER_IRQn);
 80015e6:	2020      	movs	r0, #32
 80015e8:	f7ff ff88 	bl	80014fc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(I2Cx_EV_IRQn);
 80015ec:	201f      	movs	r0, #31
 80015ee:	f7ff ff85 	bl	80014fc <__NVIC_EnableIRQ>

	hal_i2c_init(&i2c_handle);
 80015f2:	4844      	ldr	r0, [pc, #272]	; (8001704 <main+0x1cc>)
 80015f4:	f7ff ff51 	bl	800149a <hal_i2c_init>
	hal_i2c_enable_peripheral(i2c_handle.Instance); // It need for something. I think 2IC enable occur in TX/RX function
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <main+0x1cc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fe3a 	bl	8001276 <hal_i2c_enable_peripheral>

	//hal_gpio_enable_interrupt(0);

	//val = i2c_handle.Instance->CR1;
	i2c_handle.State = HAL_I2C_STATE_READY;
 8001602:	4b40      	ldr	r3, [pc, #256]	; (8001704 <main+0x1cc>)
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 ******************************************************************************
	 	 	 	 	 	 	 	 	 	 UART CONFIG
	 ******************************************************************************
	 */
	/*enable the clock for the USART2 Peripheral */
	_HAL_RCC_USART2_CLK_ENABLE();
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <main+0x1c0>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a3a      	ldr	r2, [pc, #232]	; (80016f8 <main+0x1c0>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40

	uart_handle.Instance          = USART_2;
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <main+0x1d8>)
 8001618:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <main+0x1dc>)
 800161a:	601a      	str	r2, [r3, #0]

	uart_handle.Init.BaudRate     = USART_BAUD_9600;
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <main+0x1d8>)
 800161e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001622:	605a      	str	r2, [r3, #4]
	uart_handle.Init.WordLength   = USART_WL_1S8B;
 8001624:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <main+0x1d8>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <main+0x1d8>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE;
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <main+0x1d8>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
	uart_handle.Init.Mode         = UART_MODE_TX_RX;
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <main+0x1d8>)
 8001638:	220c      	movs	r2, #12
 800163a:	615a      	str	r2, [r3, #20]
	uart_handle.Init.OverSampling = USART_OVER16_ENABLE;
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <main+0x1d8>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]

	/*fill out the application callbacks */
	uart_handle.tx_cmp_cb = app_tx_cmp_callback;
 8001642:	4b33      	ldr	r3, [pc, #204]	; (8001710 <main+0x1d8>)
 8001644:	4a34      	ldr	r2, [pc, #208]	; (8001718 <main+0x1e0>)
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
	uart_handle.rx_cmp_cb = app_rx_cmp_callback;
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <main+0x1d8>)
 800164a:	4a34      	ldr	r2, [pc, #208]	; (800171c <main+0x1e4>)
 800164c:	639a      	str	r2, [r3, #56]	; 0x38

	hal_uart_init(&uart_handle);
 800164e:	4830      	ldr	r0, [pc, #192]	; (8001710 <main+0x1d8>)
 8001650:	f000 fbe8 	bl	8001e24 <hal_uart_init>

	/*enable the IRQ of USART2 peripheral */
	NVIC_EnableIRQ(USARTx_IRQn);
 8001654:	2026      	movs	r0, #38	; 0x26
 8001656:	f7ff ff51 	bl	80014fc <__NVIC_EnableIRQ>

	while(uart_handle.tx_state != HAL_UART_STATE_READY );
 800165a:	bf00      	nop
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <main+0x1d8>)
 800165e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001662:	2b01      	cmp	r3, #1
 8001664:	d1fa      	bne.n	800165c <main+0x124>
	/*Send the message */
	hal_uart_tx(&uart_handle,message1, sizeof(message1)-1);
 8001666:	223f      	movs	r2, #63	; 0x3f
 8001668:	492d      	ldr	r1, [pc, #180]	; (8001720 <main+0x1e8>)
 800166a:	4829      	ldr	r0, [pc, #164]	; (8001710 <main+0x1d8>)
 800166c:	f000 fc22 	bl	8001eb4 <hal_uart_tx>
	 	 	 	 	 	 	 	 	 	UART CONFIG
	 ******************************************************************************
	 */

	/*enable the clock for the USART2 Peripheral */
	_HAL_RCC_USART2_CLK_ENABLE();
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <main+0x1c0>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <main+0x1c0>)
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40

	uart_handle.Instance          = USART_2;
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <main+0x1d8>)
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <main+0x1dc>)
 8001680:	601a      	str	r2, [r3, #0]

	uart_handle.Init.BaudRate     = USART_BAUD_9600;
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <main+0x1d8>)
 8001684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001688:	605a      	str	r2, [r3, #4]
	uart_handle.Init.WordLength   = USART_WL_1S8B;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <main+0x1d8>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <main+0x1d8>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <main+0x1d8>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
	uart_handle.Init.Mode         = UART_MODE_TX_RX;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <main+0x1d8>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
	uart_handle.Init.OverSampling = USART_OVER16_ENABLE;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <main+0x1d8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

/*fill out the application callbacks */
	uart_handle.tx_cmp_cb = app_tx_cmp_callback;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <main+0x1d8>)
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <main+0x1e0>)
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
	uart_handle.rx_cmp_cb = app_rx_cmp_callback;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <main+0x1d8>)
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <main+0x1e4>)
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38

	hal_uart_init(&uart_handle);
 80016b4:	4816      	ldr	r0, [pc, #88]	; (8001710 <main+0x1d8>)
 80016b6:	f000 fbb5 	bl	8001e24 <hal_uart_init>

	/*enable the IRQ of USART2 peripheral */
	NVIC_EnableIRQ(USARTx_IRQn);
 80016ba:	2026      	movs	r0, #38	; 0x26
 80016bc:	f7ff ff1e 	bl	80014fc <__NVIC_EnableIRQ>

	while(uart_handle.tx_state != HAL_UART_STATE_READY );
 80016c0:	bf00      	nop
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <main+0x1d8>)
 80016c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1fa      	bne.n	80016c2 <main+0x18a>
	/*Send the message */
	hal_uart_tx(&uart_handle,message1, sizeof(message1)-1);
 80016cc:	223f      	movs	r2, #63	; 0x3f
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <main+0x1e8>)
 80016d0:	480f      	ldr	r0, [pc, #60]	; (8001710 <main+0x1d8>)
 80016d2:	f000 fbef 	bl	8001eb4 <hal_uart_tx>
	/*while (TestReady != SET) {
		led_toggle(GPIOD, LED_RED);
		//LED3 (orange)
		delay_gen();
	}*/
	hal_gpio_write_to_pin(GPIOD, LED_RED, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	210e      	movs	r1, #14
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <main+0x1ec>)
 80016dc:	f7ff f86d 	bl	80007ba <hal_gpio_write_to_pin>

	while (1) {

#ifdef UART_TEST
		while(uart_handle.rx_state != HAL_UART_STATE_READY );
 80016e0:	bf00      	nop
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <main+0x1d8>)
 80016e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d1fa      	bne.n	80016e2 <main+0x1aa>
		/*receive the message */
		hal_uart_rx(&uart_handle,rx_buffer, 5 );
 80016ec:	2205      	movs	r2, #5
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <main+0x1f0>)
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <main+0x1d8>)
 80016f2:	f000 fc03 	bl	8001efc <hal_uart_rx>
		while(uart_handle.rx_state != HAL_UART_STATE_READY );
 80016f6:	e7f3      	b.n	80016e0 <main+0x1a8>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	200000e0 	.word	0x200000e0
 8001700:	40003800 	.word	0x40003800
 8001704:	2000008c 	.word	0x2000008c
 8001708:	40005400 	.word	0x40005400
 800170c:	000186a0 	.word	0x000186a0
 8001710:	2000011c 	.word	0x2000011c
 8001714:	40004400 	.word	0x40004400
 8001718:	08001a87 	.word	0x08001a87
 800171c:	08001a9d 	.word	0x08001a9d
 8001720:	20000000 	.word	0x20000000
 8001724:	40020c00 	.word	0x40020c00
 8001728:	200000dc 	.word	0x200000dc

0800172c <led_init>:
	uint32_t cnt = 800000;
	while (cnt--)
		;
}

void led_init(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <led_init+0x64>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a16      	ldr	r2, [pc, #88]	; (8001790 <led_init+0x64>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_RED;
 800173e:	230e      	movs	r3, #14
 8001740:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 8001742:	2301      	movs	r3, #1
 8001744:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 800174e:	2301      	movs	r3, #1
 8001750:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIOD,&gpio_pin_conf);
 8001752:	463b      	mov	r3, r7
 8001754:	4619      	mov	r1, r3
 8001756:	480f      	ldr	r0, [pc, #60]	; (8001794 <led_init+0x68>)
 8001758:	f7ff f854 	bl	8000804 <hal_gpio_init>

	gpio_pin_conf.pin = LED_BLUE;
 800175c:	230f      	movs	r3, #15
 800175e:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOD, &gpio_pin_conf);
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <led_init+0x68>)
 8001766:	f7ff f84d 	bl	8000804 <hal_gpio_init>

	gpio_pin_conf.pin = LED_ORANGE;
 800176a:	230d      	movs	r3, #13
 800176c:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOD, &gpio_pin_conf);
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <led_init+0x68>)
 8001774:	f7ff f846 	bl	8000804 <hal_gpio_init>

	gpio_pin_conf.pin = LED_GREEN;
 8001778:	230c      	movs	r3, #12
 800177a:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOD, &gpio_pin_conf);
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <led_init+0x68>)
 8001782:	f7ff f83f 	bl	8000804 <hal_gpio_init>

}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40020c00 	.word	0x40020c00

08001798 <i2c_gpio_init>:
		hal_gpio_write_to_pin(GPIOx, pin, 0);
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}

void i2c_gpio_init(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
	gpio_pin_conf_t i2c_pin;

	_HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <i2c_gpio_init+0x5c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <i2c_gpio_init+0x5c>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30

	i2c_pin.pin = I2C1_SCL_LINE;
 80017aa:	2306      	movs	r3, #6
 80017ac:	603b      	str	r3, [r7, #0]
	i2c_pin.mode = GPIO_PIN_ALT_FUN_MODE;
 80017ae:	2302      	movs	r3, #2
 80017b0:	607b      	str	r3, [r7, #4]
	i2c_pin.op_type = GPIO_PIN_OP_TYPE_OPENDRAIN;
 80017b2:	2301      	movs	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
	i2c_pin.pull = GPIO_PIN_PULL_UP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
	i2c_pin.speed = GPIO_PIN_SPEED_HIGH;
 80017ba:	2302      	movs	r3, #2
 80017bc:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOB, I2C1_SCL_LINE, GPIO_PIN_AF4_I2C123);
 80017be:	2204      	movs	r2, #4
 80017c0:	2106      	movs	r1, #6
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <i2c_gpio_init+0x60>)
 80017c4:	f7fe ffbc 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &i2c_pin);
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <i2c_gpio_init+0x60>)
 80017ce:	f7ff f819 	bl	8000804 <hal_gpio_init>

	i2c_pin.pin = I2C1_SDA_LINE;	// need change only pin number another have got same configuration
 80017d2:	2309      	movs	r3, #9
 80017d4:	603b      	str	r3, [r7, #0]

	hal_gpio_set_alt_function(GPIOB, I2C1_SDA_LINE, GPIO_PIN_AF4_I2C123);
 80017d6:	2204      	movs	r2, #4
 80017d8:	2109      	movs	r1, #9
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <i2c_gpio_init+0x60>)
 80017dc:	f7fe ffb0 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &i2c_pin);
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <i2c_gpio_init+0x60>)
 80017e6:	f7ff f80d 	bl	8000804 <hal_gpio_init>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400

080017fc <spi_gpio_init>:

void spi_gpio_init(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <spi_gpio_init+0x7c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <spi_gpio_init+0x7c>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30

	/* configure GPIOI_PIN_1 for SPI CLK functionality */
	gpio_pin_conf.pin = SPI_CLK_PIN;
 800180e:	230d      	movs	r3, #13
 8001810:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 8001812:	2302      	movs	r3, #2
 8001814:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_PUSH_DOWN;
 800181a:	2302      	movs	r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 800181e:	2301      	movs	r3, #1
 8001820:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOB, SPI_CLK_PIN, GPIO_PIN_AF5_SPI2);
 8001822:	2205      	movs	r2, #5
 8001824:	210d      	movs	r1, #13
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <spi_gpio_init+0x80>)
 8001828:	f7fe ff8a 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB,&gpio_pin_conf);
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <spi_gpio_init+0x80>)
 8001832:	f7fe ffe7 	bl	8000804 <hal_gpio_init>

	/* configure GPIOI_PIN_2 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MISO_PIN;
 8001836:	230e      	movs	r3, #14
 8001838:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 800183a:	2301      	movs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOB, SPI_MISO_PIN, GPIO_PIN_AF5_SPI2);
 800183e:	2205      	movs	r2, #5
 8001840:	210e      	movs	r1, #14
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <spi_gpio_init+0x80>)
 8001844:	f7fe ff7c 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &gpio_pin_conf);
 8001848:	463b      	mov	r3, r7
 800184a:	4619      	mov	r1, r3
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <spi_gpio_init+0x80>)
 800184e:	f7fe ffd9 	bl	8000804 <hal_gpio_init>

	/* configure GPIOI_PIN_3 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MOSI_PIN;
 8001852:	230f      	movs	r3, #15
 8001854:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 8001856:	2301      	movs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOB, SPI_MOSI_PIN, GPIO_PIN_AF5_SPI2);
 800185a:	2205      	movs	r2, #5
 800185c:	210f      	movs	r1, #15
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <spi_gpio_init+0x80>)
 8001860:	f7fe ff6e 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &gpio_pin_conf);
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <spi_gpio_init+0x80>)
 800186a:	f7fe ffcb 	bl	8000804 <hal_gpio_init>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400

08001880 <uart_gpio_init>:
/**
 ******************************************************************************
 	 	 	 	 	 	 	 	 	 	I2C CONFIG
 ******************************************************************************
 */
void uart_gpio_init(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
	gpio_pin_conf_t uart_pin_conf;

	/*enable the clock for the GPIO port A */
	_HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <uart_gpio_init+0x5c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <uart_gpio_init+0x5c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30

	/*configure the GPIO_PORT_A_PIN_2 as TX */
	uart_pin_conf.pin = USARTx_TX_PIN;
 8001892:	2302      	movs	r3, #2
 8001894:	603b      	str	r3, [r7, #0]
	uart_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 8001896:	2302      	movs	r3, #2
 8001898:	607b      	str	r3, [r7, #4]
	uart_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
	uart_pin_conf.speed = GPIO_PIN_SPEED_HIGH;
 800189e:	2302      	movs	r3, #2
 80018a0:	613b      	str	r3, [r7, #16]
	uart_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
	hal_gpio_set_alt_function(GPIOA, USARTx_TX_PIN, USARTx_TX_AF);
 80018a6:	2207      	movs	r2, #7
 80018a8:	2102      	movs	r1, #2
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <uart_gpio_init+0x60>)
 80018ac:	f7fe ff48 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOA, &uart_pin_conf);
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	480a      	ldr	r0, [pc, #40]	; (80018e0 <uart_gpio_init+0x60>)
 80018b6:	f7fe ffa5 	bl	8000804 <hal_gpio_init>

	/*configure the GPIO_PORT_A_PIN_3 as RX */
	uart_pin_conf.pin = USARTx_RX_PIN;
 80018ba:	2303      	movs	r3, #3
 80018bc:	603b      	str	r3, [r7, #0]
	hal_gpio_set_alt_function(GPIOA, USARTx_RX_PIN, USARTx_TX_AF);
 80018be:	2207      	movs	r2, #7
 80018c0:	2103      	movs	r1, #3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <uart_gpio_init+0x60>)
 80018c4:	f7fe ff3c 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOA, &uart_pin_conf);
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <uart_gpio_init+0x60>)
 80018ce:	f7fe ff99 	bl	8000804 <hal_gpio_init>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <error_handler>:

void error_handler(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	while (uart_handle.tx_state != HAL_UART_STATE_READY)
 80018e8:	bf00      	nop
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <error_handler+0x20>)
 80018ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d1fa      	bne.n	80018ea <error_handler+0x6>
		;
	hal_uart_tx(&uart_handle, message2, sizeof(message2) - 1);
 80018f4:	2215      	movs	r2, #21
 80018f6:	4904      	ldr	r1, [pc, #16]	; (8001908 <error_handler+0x24>)
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <error_handler+0x20>)
 80018fa:	f000 fadb 	bl	8001eb4 <hal_uart_tx>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000011c 	.word	0x2000011c
 8001908:	20000040 	.word	0x20000040

0800190c <handle_cmd>:

void handle_cmd(int cmd, int led) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	if (cmd == 'H') {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b48      	cmp	r3, #72	; 0x48
 800191a:	d124      	bne.n	8001966 <handle_cmd+0x5a>
		if (led == (int) 0xff){
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d114      	bne.n	800194c <handle_cmd+0x40>
			hal_gpio_write_to_pin(GPIOD, LED_ORANGE, 1);
 8001922:	2201      	movs	r2, #1
 8001924:	210d      	movs	r1, #13
 8001926:	4827      	ldr	r0, [pc, #156]	; (80019c4 <handle_cmd+0xb8>)
 8001928:	f7fe ff47 	bl	80007ba <hal_gpio_write_to_pin>
			hal_gpio_write_to_pin(GPIOD, LED_BLUE, 1);
 800192c:	2201      	movs	r2, #1
 800192e:	210f      	movs	r1, #15
 8001930:	4824      	ldr	r0, [pc, #144]	; (80019c4 <handle_cmd+0xb8>)
 8001932:	f7fe ff42 	bl	80007ba <hal_gpio_write_to_pin>
			hal_gpio_write_to_pin(GPIOD, LED_GREEN, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	210c      	movs	r1, #12
 800193a:	4822      	ldr	r0, [pc, #136]	; (80019c4 <handle_cmd+0xb8>)
 800193c:	f7fe ff3d 	bl	80007ba <hal_gpio_write_to_pin>
			hal_gpio_write_to_pin(GPIOD, LED_RED, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	210e      	movs	r1, #14
 8001944:	481f      	ldr	r0, [pc, #124]	; (80019c4 <handle_cmd+0xb8>)
 8001946:	f7fe ff38 	bl	80007ba <hal_gpio_write_to_pin>
 800194a:	e006      	b.n	800195a <handle_cmd+0x4e>
		} else {
			hal_gpio_write_to_pin(GPIOD, led, 1);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	2201      	movs	r2, #1
 8001952:	4619      	mov	r1, r3
 8001954:	481b      	ldr	r0, [pc, #108]	; (80019c4 <handle_cmd+0xb8>)
 8001956:	f7fe ff30 	bl	80007ba <hal_gpio_write_to_pin>
		}
		hal_uart_tx(&uart_handle, message3, sizeof(message3) - 1);
 800195a:	220c      	movs	r2, #12
 800195c:	491a      	ldr	r1, [pc, #104]	; (80019c8 <handle_cmd+0xbc>)
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <handle_cmd+0xc0>)
 8001960:	f000 faa8 	bl	8001eb4 <hal_uart_tx>

		hal_uart_tx(&uart_handle, message3, sizeof(message3) - 1);
	} else {
		error_handler();
	}
}
 8001964:	e029      	b.n	80019ba <handle_cmd+0xae>
	} else if (cmd == 'L') {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b4c      	cmp	r3, #76	; 0x4c
 800196a:	d124      	bne.n	80019b6 <handle_cmd+0xaa>
		if (led == (int) 0xff) {
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d114      	bne.n	800199c <handle_cmd+0x90>
			hal_gpio_write_to_pin(GPIOD, LED_ORANGE, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	210d      	movs	r1, #13
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <handle_cmd+0xb8>)
 8001978:	f7fe ff1f 	bl	80007ba <hal_gpio_write_to_pin>
			hal_gpio_write_to_pin(GPIOD, LED_BLUE, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	210f      	movs	r1, #15
 8001980:	4810      	ldr	r0, [pc, #64]	; (80019c4 <handle_cmd+0xb8>)
 8001982:	f7fe ff1a 	bl	80007ba <hal_gpio_write_to_pin>
			hal_gpio_write_to_pin(GPIOD, LED_GREEN, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	210c      	movs	r1, #12
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <handle_cmd+0xb8>)
 800198c:	f7fe ff15 	bl	80007ba <hal_gpio_write_to_pin>
			hal_gpio_write_to_pin(GPIOD, LED_RED, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	210e      	movs	r1, #14
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <handle_cmd+0xb8>)
 8001996:	f7fe ff10 	bl	80007ba <hal_gpio_write_to_pin>
 800199a:	e006      	b.n	80019aa <handle_cmd+0x9e>
			hal_gpio_write_to_pin(GPIOD, led, 0);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	4619      	mov	r1, r3
 80019a4:	4807      	ldr	r0, [pc, #28]	; (80019c4 <handle_cmd+0xb8>)
 80019a6:	f7fe ff08 	bl	80007ba <hal_gpio_write_to_pin>
		hal_uart_tx(&uart_handle, message3, sizeof(message3) - 1);
 80019aa:	220c      	movs	r2, #12
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <handle_cmd+0xbc>)
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <handle_cmd+0xc0>)
 80019b0:	f000 fa80 	bl	8001eb4 <hal_uart_tx>
}
 80019b4:	e001      	b.n	80019ba <handle_cmd+0xae>
		error_handler();
 80019b6:	f7ff ff95 	bl	80018e4 <error_handler>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	20000058 	.word	0x20000058
 80019cc:	2000011c 	.word	0x2000011c

080019d0 <parse_cmd>:

void parse_cmd(uint8_t *cmd) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	if (cmd[0] == 'L' && cmd[1] == 'E' && cmd[2] == 'D') {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b4c      	cmp	r3, #76	; 0x4c
 80019de:	d14a      	bne.n	8001a76 <parse_cmd+0xa6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b45      	cmp	r3, #69	; 0x45
 80019e8:	d145      	bne.n	8001a76 <parse_cmd+0xa6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3302      	adds	r3, #2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b44      	cmp	r3, #68	; 0x44
 80019f2:	d140      	bne.n	8001a76 <parse_cmd+0xa6>
		if (cmd[3] == 'O') {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3303      	adds	r3, #3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b4f      	cmp	r3, #79	; 0x4f
 80019fc:	d107      	bne.n	8001a0e <parse_cmd+0x3e>
			handle_cmd(cmd[4], LED_ORANGE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3304      	adds	r3, #4
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	210d      	movs	r1, #13
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff80 	bl	800190c <handle_cmd>
		if (cmd[3] == 'O') {
 8001a0c:	e036      	b.n	8001a7c <parse_cmd+0xac>
		} else if (cmd[3] == 'B') {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3303      	adds	r3, #3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b42      	cmp	r3, #66	; 0x42
 8001a16:	d107      	bne.n	8001a28 <parse_cmd+0x58>
			handle_cmd(cmd[4], LED_BLUE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	210f      	movs	r1, #15
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff73 	bl	800190c <handle_cmd>
		if (cmd[3] == 'O') {
 8001a26:	e029      	b.n	8001a7c <parse_cmd+0xac>
		} else if (cmd[3] == 'G') {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b47      	cmp	r3, #71	; 0x47
 8001a30:	d107      	bne.n	8001a42 <parse_cmd+0x72>
			handle_cmd(cmd[4], LED_GREEN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	210c      	movs	r1, #12
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff66 	bl	800190c <handle_cmd>
		if (cmd[3] == 'O') {
 8001a40:	e01c      	b.n	8001a7c <parse_cmd+0xac>
		} else if (cmd[3] == 'R') {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3303      	adds	r3, #3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b52      	cmp	r3, #82	; 0x52
 8001a4a:	d107      	bne.n	8001a5c <parse_cmd+0x8c>
			handle_cmd(cmd[4], LED_RED);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	210e      	movs	r1, #14
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff59 	bl	800190c <handle_cmd>
		if (cmd[3] == 'O') {
 8001a5a:	e00f      	b.n	8001a7c <parse_cmd+0xac>
		} else if (cmd[3] == 'A') {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3303      	adds	r3, #3
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b41      	cmp	r3, #65	; 0x41
 8001a64:	d10a      	bne.n	8001a7c <parse_cmd+0xac>
			handle_cmd(cmd[4], 0xff);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	21ff      	movs	r1, #255	; 0xff
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff4c 	bl	800190c <handle_cmd>
		if (cmd[3] == 'O') {
 8001a74:	e002      	b.n	8001a7c <parse_cmd+0xac>
		} else {
			;
		}
	} else {
		error_handler();
 8001a76:	f7ff ff35 	bl	80018e4 <error_handler>
	}
}
 8001a7a:	e000      	b.n	8001a7e <parse_cmd+0xae>
		if (cmd[3] == 'O') {
 8001a7c:	bf00      	nop
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <app_tx_cmp_callback>:

void app_tx_cmp_callback(void *size){
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <app_rx_cmp_callback>:

void app_rx_cmp_callback(void *size){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	//we got a command,  parse it
	parse_cmd(rx_buffer);
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <app_rx_cmp_callback+0x18>)
 8001aa6:	f7ff ff93 	bl	80019d0 <parse_cmd>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000dc 	.word	0x200000dc

08001ab8 <button_init>:
		led_toggle(GPIOD, LED_RED);
		delay_gen();
	}
}

void button_init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
	_HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <button_init+0x48>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <button_init+0x48>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf_t gpio_pin_conf;
	gpio_pin_conf.pin = GPIO_BUTTON_PIN;
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_INPUT_MODE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIO_BUTTON_PORT, &gpio_pin_conf);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <button_init+0x4c>)
 8001ae4:	f7fe fe8e 	bl	8000804 <hal_gpio_init>

	//RCC->APB2ENR |= (1 << 14);
	//SYSCFG->EXTICR[0] &= (0b1111 << 12);
	hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_FALLING_EDGE);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7fe feb8 	bl	8000860 <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI0_IRQn);
 8001af0:	2106      	movs	r1, #6
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7fe fefa 	bl	80008ec <hal_gpio_enable_interrupt>
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <EXTI0_IRQHandler>:
/*
 * @brief  brief  This function handles EXTI15-10 interrupt request.
 * @param  none
 * @retval none
 */
void EXTI0_IRQHandler(void){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7fe ff0b 	bl	8000928 <hal_gpio_clear_interrupt>
	TestReady = SET;
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <EXTI0_IRQHandler+0x14>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000084 	.word	0x20000084

08001b20 <I2C1_EV_IRQHandler>:
/*
 * @brief  This function handles I2C event interrupt request.
 * @param  none
 * @retval none
 */
void I2C1_EV_IRQHandler(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(& i2c_handle);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <I2C1_EV_IRQHandler+0x10>)
 8001b26:	f7ff f9bd 	bl	8000ea4 <HAL_I2C_EV_IRQHandler>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000008c 	.word	0x2000008c

08001b34 <I2C1_ER_IRQHandler>:
/*
 * @brief  This function handles I2C error interrupt request.
 * @param  none
 * @retval none
 */
void I2C1_ER_IRQHandler(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(& i2c_handle);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <I2C1_ER_IRQHandler+0x10>)
 8001b3a:	f7ff fae1 	bl	8001100 <HAL_I2C_ER_IRQHandler>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000008c 	.word	0x2000008c

08001b48 <SPI2_IRQHandler>:
/*
 * @brief  This function handles SPI2 interrupt request.
 * @param  none
 * @retval none
 */
void SPI2_IRQHandler(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	/* call the driver api to process this interrupt */
	hal_spi_irq_handler(&SpiHandle);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <SPI2_IRQHandler+0x10>)
 8001b4e:	f7fe fd3b 	bl	80005c8 <hal_spi_irq_handler>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200000e0 	.word	0x200000e0

08001b5c <USART2_IRQHandler>:

void USARTx_IRQHandler(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	/* call the driver api to process this interrupt */
	hal_uart_handle_interrupt(&uart_handle);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <USART2_IRQHandler+0x10>)
 8001b62:	f000 fabf 	bl	80020e4 <hal_uart_handle_interrupt>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000011c 	.word	0x2000011c

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <SystemInit+0x28>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <SystemInit+0x28>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SystemInit+0x28>)
 8001b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <hal_uart_enable>:
/**
	* @brief  Enable the given USART peripheral
	* @param  *uartx : base address of the USART or UART peripheral
	* @retval None
	*/
void hal_uart_enable(USART_TypeDef *uartx){
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	uartx->CR1 |= USART_REG_CR1_USART_EN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <hal_uart_enable_disable_tx>:
	* @brief  Enable/Disable the Transmit block of the  given USART peripheral
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  te    : if te=1, then enable the Transmit block.
	* @retval None
	*/
void hal_uart_enable_disable_tx(USART_TypeDef *uartx, uint32_t te) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	if (te & USART_REG_CR1_TE) {   // this if always zero??  maybe need use only te
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <hal_uart_enable_disable_tx+0x22>
		uartx->CR1 |= USART_REG_CR1_TE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f043 0208 	orr.w	r2, r3, #8
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
	} else {
		uartx->CR1 &= ~USART_REG_CR1_TE;
	}
}
 8001bdc:	e005      	b.n	8001bea <hal_uart_enable_disable_tx+0x2e>
		uartx->CR1 &= ~USART_REG_CR1_TE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f023 0208 	bic.w	r2, r3, #8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60da      	str	r2, [r3, #12]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <hal_uart_enable_disable_rx>:
	* @brief  Enable/Disable the Receive block of the  given USART peripheral
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  te    : if re=1, then enable the Receive block.
	* @retval None
	*/
void hal_uart_enable_disable_rx(USART_TypeDef *uartx, uint32_t re) {
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
	if (re & USART_REG_CR1_RE) {   // this if always zero?? maybe need use only te
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <hal_uart_enable_disable_rx+0x22>
		uartx->CR1 |= USART_REG_CR1_RE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60da      	str	r2, [r3, #12]
	} else {
		uartx->CR1 &= ~USART_REG_CR1_RE;
	}
}
 8001c16:	e005      	b.n	8001c24 <hal_uart_enable_disable_rx+0x2e>
		uartx->CR1 &= ~USART_REG_CR1_RE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f023 0204 	bic.w	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <hal_uart_configure_word_length>:
	* @brief  Configures the word length for data transmission and reception
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  wl    : if wl=1, then word length = 1s,9bits,nstop
	* @retval None
	*/
void hal_uart_configure_word_length(USART_TypeDef *uartx, uint32_t wl) {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	if (wl) {
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <hal_uart_configure_word_length+0x1e>
		uartx->CR1 |= USART_REG_CR1_UART_WL;   //9data bits
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]
	} else {
		uartx->CR1 &= ~USART_REG_CR1_UART_WL;   //8 data bits
	}

}
 8001c4c:	e005      	b.n	8001c5a <hal_uart_configure_word_length+0x2a>
		uartx->CR1 &= ~USART_REG_CR1_UART_WL;   //8 data bits
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60da      	str	r2, [r3, #12]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <hal_uart_configure_stop_bits>:
	* @brief  Configures the number of stop bits
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  nstop    : this value configures the stop bits
	* @retval None
	*/
void hal_uart_configure_stop_bits(USART_TypeDef *uartx, uint32_t nstop) {
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
	//clear the 12th and 13 th bits
	uartx->CR2 &= ~(0x3 << USART_REG_CR2_STOP_BITS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	611a      	str	r2, [r3, #16]

	if (nstop == USART_STOP_BITS_HALF) {
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <hal_uart_configure_stop_bits+0x2a>
		uartx->CR2 |= (0x01 << USART_REG_CR2_STOP_BITS);   //0.5 stop bits
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]
	} else if (nstop == USART_STOP_BITS_1NHALF) {
		uartx->CR2 |= (0x03 << USART_REG_CR2_STOP_BITS);   //1.5 stop bits
	} else {
		uartx->CR2 |= (0x00 << USART_REG_CR2_STOP_BITS);   // 1 stop bits
	}
}
 8001c8e:	e017      	b.n	8001cc0 <hal_uart_configure_stop_bits+0x5a>
	} else if (nstop == USART_STOP_BITS_2) {
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d106      	bne.n	8001ca4 <hal_uart_configure_stop_bits+0x3e>
		uartx->CR2 |= (0x02 << USART_REG_CR2_STOP_BITS);   //2 stop bits
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
}
 8001ca2:	e00d      	b.n	8001cc0 <hal_uart_configure_stop_bits+0x5a>
	} else if (nstop == USART_STOP_BITS_1NHALF) {
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d106      	bne.n	8001cb8 <hal_uart_configure_stop_bits+0x52>
		uartx->CR2 |= (0x03 << USART_REG_CR2_STOP_BITS);   //1.5 stop bits
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
}
 8001cb6:	e003      	b.n	8001cc0 <hal_uart_configure_stop_bits+0x5a>
		uartx->CR2 |= (0x00 << USART_REG_CR2_STOP_BITS);   // 1 stop bits
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <hal_uart_configure_over_sampling>:
	* @brief  Configures the over sampling rate of the USART peripheral
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  over8     : if over8=1, then oversampling by 8 will be used , otherwise default Oversampling by 16
	* @retval None
	*/
void hal_uart_configure_over_sampling(USART_TypeDef *uartx, uint32_t over8) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
	if (over8) {
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <hal_uart_configure_over_sampling+0x1c>
		uartx->CR1 |= USART_REG_CR1_OVER8;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
	}

}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <hal_uart_set_baud_rate>:
	* @brief  Program the given baudrate
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  baud     : baudrate value to be programmed
	* @retval None
	*/
void hal_uart_set_baud_rate(USART_TypeDef *uartx, uint32_t baud) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	uint32_t val;
	if (baud == USART_BAUD_9600) {
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001d04:	d103      	bne.n	8001d0e <hal_uart_set_baud_rate+0x1a>
		val = 0x683;
 8001d06:	f240 6383 	movw	r3, #1667	; 0x683
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e008      	b.n	8001d20 <hal_uart_set_baud_rate+0x2c>
	} else if (baud == USART_BAUD_115200) {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8001d14:	d102      	bne.n	8001d1c <hal_uart_set_baud_rate+0x28>
		val = 0x8A;
 8001d16:	238a      	movs	r3, #138	; 0x8a
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e001      	b.n	8001d20 <hal_uart_set_baud_rate+0x2c>

	} else {
		val = 0x8A;
 8001d1c:	238a      	movs	r3, #138	; 0x8a
 8001d1e:	60fb      	str	r3, [r7, #12]
	}
	uartx->BRR = val;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	609a      	str	r2, [r3, #8]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <hal_uart_configure_txe_interrupt>:
	* @brief  Enable/Disable the TXE interrupt
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  txe_en     : if txe_en =1, then enable the TXE interrupt
	* @retval None
	*/
void hal_uart_configure_txe_interrupt(USART_TypeDef *uartx, uint32_t txe_en) {
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	if (txe_en)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <hal_uart_configure_txe_interrupt+0x1e>
		uartx->CR1 |= USART_REG_CR1_TXE_INT_EN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60da      	str	r2, [r3, #12]
	else
		uartx->CR1 &= ~USART_REG_CR1_TXE_INT_EN;
}
 8001d4e:	e005      	b.n	8001d5c <hal_uart_configure_txe_interrupt+0x2a>
		uartx->CR1 &= ~USART_REG_CR1_TXE_INT_EN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <hal_uart_configure_rxne_interrupt>:
	* @brief  Enable/Disable the RXNE interrupt
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  rxne_en     : if rxne_en =1, then enable the RXNE interrupt
	* @retval None
	*/
void hal_uart_configure_rxne_interrupt(USART_TypeDef *uartx, uint32_t rxne_en) {
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	if (rxne_en)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <hal_uart_configure_rxne_interrupt+0x1e>
		uartx->CR1 |= USART_REG_CR1_RXNE_INT_EN;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
	else
		uartx->CR1 &= ~USART_REG_CR1_RXNE_INT_EN;
}
 8001d84:	e005      	b.n	8001d92 <hal_uart_configure_rxne_interrupt+0x2a>
		uartx->CR1 &= ~USART_REG_CR1_RXNE_INT_EN;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f023 0220 	bic.w	r2, r3, #32
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60da      	str	r2, [r3, #12]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <hal_uart_configure_error_interrupt>:
	* @brief  Enable/Disable the Error interrupt (Frame error, noise error, overrun error)
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  er_en     : if er_en =1, then enable the error interrupt
	* @retval None
	*/
void hal_uart_configure_error_interrupt(USART_TypeDef *uartx, uint32_t er_en) {
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
	if (er_en)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <hal_uart_configure_error_interrupt+0x1e>
		uartx->CR3 |= USART_REG_CR3_ERR_INT_EN;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	615a      	str	r2, [r3, #20]
	else
		uartx->CR3 &= ~USART_REG_CR3_ERR_INT_EN;
}
 8001dba:	e005      	b.n	8001dc8 <hal_uart_configure_error_interrupt+0x2a>
		uartx->CR3 &= ~USART_REG_CR3_ERR_INT_EN;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f023 0201 	bic.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	615a      	str	r2, [r3, #20]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <hal_uart_configure_parity_error_interrupt>:
	* @param  *uartx : base address of the USART or UART peripheral
	* @param  pe_en     : if pe_en =1, then enable the Parity Error interrupt
	* @retval None
	*/
void hal_uart_configure_parity_error_interrupt(USART_TypeDef *uartx,
		uint32_t pe_en) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	if (pe_en)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <hal_uart_configure_parity_error_interrupt+0x1e>
		uartx->CR1 |= USART_REG_CR1_PEIE_INT_EN;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
	else
		uartx->CR1 &= ~USART_REG_CR1_PEIE_INT_EN;
}
 8001df0:	e005      	b.n	8001dfe <hal_uart_configure_parity_error_interrupt+0x2a>
		uartx->CR1 &= ~USART_REG_CR1_PEIE_INT_EN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60da      	str	r2, [r3, #12]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <hal_uart_error_cb>:
  * @brief  UART error callbacks.
  * @param  huart: pointer to a uart_handle_t structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void hal_uart_error_cb(uart_handle_t *huart) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	while (1) {
		hal_gpio_write_to_pin(GPIOD, LED_RED, 1);
 8001e14:	2201      	movs	r2, #1
 8001e16:	210e      	movs	r1, #14
 8001e18:	4801      	ldr	r0, [pc, #4]	; (8001e20 <hal_uart_error_cb+0x14>)
 8001e1a:	f7fe fcce 	bl	80007ba <hal_gpio_write_to_pin>
 8001e1e:	e7f9      	b.n	8001e14 <hal_uart_error_cb+0x8>
 8001e20:	40020c00 	.word	0x40020c00

08001e24 <hal_uart_init>:
/**
	* @brief  API to do UART Peripheral initialization
	* @param  *handle : pointer to the handle structure of the UART peripheral
	* @retval None
	*/
void hal_uart_init(uart_handle_t *uart_handle) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

	/* Configure the Word length */
	hal_uart_configure_word_length(uart_handle->Instance,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f7ff fefa 	bl	8001c30 <hal_uart_configure_word_length>
			uart_handle->Init.WordLength);

	/*Configure the number of STOP bits */
	hal_uart_configure_stop_bits(uart_handle->Instance,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f7ff ff0d 	bl	8001c66 <hal_uart_configure_stop_bits>
			uart_handle->Init.StopBits);

	/*Configure the oversampling rate for the receive block */
	hal_uart_configure_over_sampling(uart_handle->Instance,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff ff38 	bl	8001ccc <hal_uart_configure_over_sampling>
			uart_handle->Init.OverSampling);

	/*Set the baud rate */
	hal_uart_set_baud_rate(uart_handle->Instance, uart_handle->Init.BaudRate);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7ff ff44 	bl	8001cf4 <hal_uart_set_baud_rate>

	/*Enable the Transmit block of the UART peripheral */
	hal_uart_enable_disable_tx(uart_handle->Instance, uart_handle->Init.Mode);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f7ff fea0 	bl	8001bbc <hal_uart_enable_disable_tx>

	/*Enable the Receive block of the UART Peripheral */
	hal_uart_enable_disable_rx(uart_handle->Instance, uart_handle->Init.Mode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f7ff feb5 	bl	8001bf6 <hal_uart_enable_disable_rx>

	/* Enable the UART peripheral */
	hal_uart_enable(uart_handle->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe83 	bl	8001b9c <hal_uart_enable>

	uart_handle->tx_state = HAL_UART_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	uart_handle->rx_state = HAL_UART_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	uart_handle->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <hal_uart_tx>:
	* @param  *uart_handle : pointer to the handle structure of the UART Peripheral
	* @param  *buffer : holds the pointer to the TX buffer
	* @param  len : len of the data to be TXed
	* @retval None
	*/
void hal_uart_tx(uart_handle_t *uart_handle, uint8_t *buffer, uint32_t len) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	/*Populate the application given inforamtions in to the UART handle structure */
	uart_handle->pTxBuffPtr = buffer;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	61da      	str	r2, [r3, #28]
	uart_handle->TxXferCount = len;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	845a      	strh	r2, [r3, #34]	; 0x22
	uart_handle->TxXferSize = len;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	841a      	strh	r2, [r3, #32]

	/* This handle is busy in doing the TX */
	uart_handle->tx_state = HAL_UART_STATE_BUSY_TX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2212      	movs	r2, #18
 8001eda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	/*Enable the UART Peripheral */
	hal_uart_enable(uart_handle->Instance);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe5a 	bl	8001b9c <hal_uart_enable>

	/*lets, enable the TXE interrupt */
	hal_uart_configure_txe_interrupt(uart_handle->Instance, 1);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff1f 	bl	8001d32 <hal_uart_configure_txe_interrupt>
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <hal_uart_rx>:
	* @param  *handle : pointer to the handle structure of the UART peripheral
	* @param  *buffer : holds the pointer to the RX buffer
	* @param  len : len of the data to be RXed
	* @retval None
	*/
void hal_uart_rx(uart_handle_t *uart_handle, uint8_t *buffer, uint32_t len) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	uint32_t val;
	/*Populate the application given inforamtions in to the UART handle structure */
	uart_handle->pRxBuffPtr = buffer;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
	uart_handle->RxXferCount = len;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	855a      	strh	r2, [r3, #42]	; 0x2a
	uart_handle->RxXferSize = len;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28

	/* This handle is busy in doing the RX */
	uart_handle->rx_state = HAL_UART_STATE_BUSY_RX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2222      	movs	r2, #34	; 0x22
 8001f22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Enable the UART Parity Error Interrupt */
	hal_uart_configure_parity_error_interrupt(uart_handle->Instance, 1);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff51 	bl	8001dd4 <hal_uart_configure_parity_error_interrupt>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	hal_uart_configure_error_interrupt(uart_handle->Instance, 1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff30 	bl	8001d9e <hal_uart_configure_error_interrupt>

	val = uart_handle->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	617b      	str	r3, [r7, #20]
	/* Enable the UART Data Register not empty Interrupt */
	hal_uart_configure_rxne_interrupt(uart_handle->Instance, 1);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff0b 	bl	8001d68 <hal_uart_configure_rxne_interrupt>
	UNUSED(val);
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <hal_uart_handle_TXE_interrupt>:
  * @brief  handle the TXE interrupt
  * @param  huart: Pointer to a uart_handle_t structure that contains
  *                the configuration information for the specified UART module.
  * @retval none
  */
static void hal_uart_handle_TXE_interrupt(uart_handle_t *huart) {
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
	uint8_t val;

	tmp1 = huart->tx_state;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f6c:	60fb      	str	r3, [r7, #12]
	if (tmp1 == HAL_UART_STATE_BUSY_TX) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d124      	bne.n	8001fbe <hal_uart_handle_TXE_interrupt+0x64>
		val = (uint8_t) (*huart->pTxBuffPtr++ & (uint8_t) 0x00FF);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	1c59      	adds	r1, r3, #1
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	61d1      	str	r1, [r2, #28]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	72fb      	strb	r3, [r7, #11]
		huart->Instance->DR = val;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7afa      	ldrb	r2, [r7, #11]
 8001f88:	605a      	str	r2, [r3, #4]

		if (--huart->TxXferCount == 0) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	845a      	strh	r2, [r3, #34]	; 0x22
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <hal_uart_handle_TXE_interrupt+0x64>
			/* Disable the UART TXE Interrupt */
			huart->Instance->CR1 &= ~USART_REG_CR1_TXE_INT_EN;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fac:	60da      	str	r2, [r3, #12]

			/* Enable the UART Transmit Complete Interrupt */
			huart->Instance->CR1 |= USART_REG_CR1_TCIE_INT_EN;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fbc:	60da      	str	r2, [r3, #12]
		}
	}
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <hal_uart_handle_RXNE_interrupt>:
  * @brief  Handle the RXNE interrupt
  * @param  huart: pointer to a uart_handle_t structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void hal_uart_handle_RXNE_interrupt(uart_handle_t *huart) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]

	uint32_t tmp1 = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
	tmp1 = huart->rx_state;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fdc:	60fb      	str	r3, [r7, #12]

	if (tmp1 == HAL_UART_STATE_BUSY_RX) {
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b22      	cmp	r3, #34	; 0x22
 8001fe2:	d14b      	bne.n	800207c <hal_uart_handle_RXNE_interrupt+0xb2>
		//is application using parity ??
		if (huart->Init.Parity == UART_PARITY_NONE) {  //no parity
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <hal_uart_handle_RXNE_interrupt+0x38>
			*huart->pRxBuffPtr++ = (uint8_t) (huart->Instance->DR
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6858      	ldr	r0, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6251      	str	r1, [r2, #36]	; 0x24
 8001ffc:	b2c2      	uxtb	r2, r0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e00c      	b.n	800201c <hal_uart_handle_RXNE_interrupt+0x52>
					& (uint8_t) 0x00FF);
		} else { //yes, dont read the most significant bit, because its a parity bit
			*huart->pRxBuffPtr++ = (uint8_t) (huart->Instance->DR
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	1c58      	adds	r0, r3, #1
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	6248      	str	r0, [r1, #36]	; 0x24
 8002014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
					& (uint8_t) 0x007F);
		}

		/* are we done with the reception ?? */
		if (--huart->RxXferCount == 0) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	2b00      	cmp	r3, #0
 800202e:	d125      	bne.n	800207c <hal_uart_handle_RXNE_interrupt+0xb2>
			//yes, disable the RXNE interrupt
			huart->Instance->CR1 &= ~USART_REG_CR1_RXNE_INT_EN;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0220 	bic.w	r2, r2, #32
 800203e:	60da      	str	r2, [r3, #12]

			/* Disable the UART Parity Error Interrupt */
			huart->Instance->CR1 &= ~USART_REG_CR1_PEIE_INT_EN;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204e:	60da      	str	r2, [r3, #12]

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			huart->Instance->CR3 &= ~USART_REG_CR3_ERR_INT_EN;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	615a      	str	r2, [r3, #20]

			//make the state ready for this handle
			huart->rx_state = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

			/*call the applicaton callback */
			if (huart->rx_cmp_cb)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <hal_uart_handle_RXNE_interrupt+0xb2>
				huart->rx_cmp_cb(&huart->RxXferSize);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	3228      	adds	r2, #40	; 0x28
 8002078:	4610      	mov	r0, r2
 800207a:	4798      	blx	r3
		}
	}
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <hal_uart_handle_TC_interrupt>:
  * @brief Handle the Transmission Complete (TC) interrupt
  * @param  huart: pointer to a uart_handle_t structure that contains
  *                the configuration information for the specified UART module.
  * @retval void
  */
static void hal_uart_handle_TC_interrupt(uart_handle_t *huart) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	/* Disable the UART Transmit Complete Interrupt */
	huart->Instance->CR1 &= ~USART_REG_CR1_TCIE_INT_EN;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209a:	60da      	str	r2, [r3, #12]
	huart->tx_state = HAL_UART_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	/*call the application callback */
	if (huart->tx_cmp_cb)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <hal_uart_handle_TC_interrupt+0x34>
		huart->tx_cmp_cb(&huart->TxXferSize);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	3220      	adds	r2, #32
 80020b4:	4610      	mov	r0, r2
 80020b6:	4798      	blx	r3
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <hal_uart_clear_error_flag>:
	* @brief  Clear the error flag
	* @param  *huart : pointer to a uart_handle_t structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
	*/
void hal_uart_clear_error_flag(uart_handle_t *huart) {
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	tmpreg = huart->Instance->SR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]
	tmpreg = huart->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]
	UNUSED(tmpreg);
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <hal_uart_handle_interrupt>:
  * @brief  This function handles UART interrupt request.
  * @param  huart: pointer to a uart_handle_t structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void hal_uart_handle_interrupt(uart_handle_t *huart) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]

	tmp1 = huart->Instance->SR & USART_REG_SR_PE_FLAG;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR1 & USART_REG_CR1_PEIE_INT_EN;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	60bb      	str	r3, [r7, #8]
	/* UART parity error interrupt occurred ------------------------------------*/
	if ((tmp1) && (tmp2)) {
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <hal_uart_handle_interrupt+0x46>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <hal_uart_handle_interrupt+0x46>
		hal_uart_clear_error_flag(huart);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ffd1 	bl	80020c0 <hal_uart_clear_error_flag>
		huart->ErrorCode |= HAL_UART_ERROR_PE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
	}

	tmp1 = huart->Instance->SR & USART_REG_SR_FE_FLAG;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR3 & USART_REG_CR3_ERR_INT_EN;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
	/* UART frame error interrupt occurred -------------------------------------*/
	if ((tmp1) && (tmp2)) {
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <hal_uart_handle_interrupt+0x7c>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <hal_uart_handle_interrupt+0x7c>
		hal_uart_clear_error_flag(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffb6 	bl	80020c0 <hal_uart_clear_error_flag>
		huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f043 0204 	orr.w	r2, r3, #4
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	tmp1 = huart->Instance->SR & USART_REG_SR_NE_FLAG;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR3 & USART_REG_CR3_ERR_INT_EN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
	/* UART noise error interrupt occurred -------------------------------------*/
	if ((tmp1) && (tmp2)) {
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <hal_uart_handle_interrupt+0xb2>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <hal_uart_handle_interrupt+0xb2>
		hal_uart_clear_error_flag(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff9b 	bl	80020c0 <hal_uart_clear_error_flag>
		huart->ErrorCode |= HAL_UART_ERROR_NE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f043 0202 	orr.w	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
	}

	tmp1 = huart->Instance->SR & USART_REG_SR_ORE_FLAG;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR3 & USART_REG_CR3_ERR_INT_EN;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
	/* UART Over-Run interrupt occurred ----------------------------------------*/
	if ((tmp1) && (tmp2)) {
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <hal_uart_handle_interrupt+0xe8>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <hal_uart_handle_interrupt+0xe8>
		hal_uart_clear_error_flag(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff80 	bl	80020c0 <hal_uart_clear_error_flag>
		huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f043 0208 	orr.w	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
	}

	tmp1 = huart->Instance->SR & USART_REG_SR_RXNE_FLAG;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR1 & USART_REG_CR1_RXNE_INT_EN;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	60bb      	str	r3, [r7, #8]
	/* UART in mode Receiver ---------------------------------------------------*/
	if ((tmp1) && (tmp2)) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <hal_uart_handle_interrupt+0x112>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <hal_uart_handle_interrupt+0x112>
		hal_uart_handle_RXNE_interrupt(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff feea 	bl	8001fca <hal_uart_handle_RXNE_interrupt>
	}

	tmp1 = huart->Instance->SR & USART_REG_SR_TXE_FLAG;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR1 & USART_REG_CR1_TXE_INT_EN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	60bb      	str	r3, [r7, #8]
	/* UART in mode Transmitter ------------------------------------------------*/
	if ((tmp1) && (tmp2)) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <hal_uart_handle_interrupt+0x13c>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <hal_uart_handle_interrupt+0x13c>
		hal_uart_handle_TXE_interrupt(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fe9d 	bl	8001f5a <hal_uart_handle_TXE_interrupt>
	}

	tmp1 = huart->Instance->SR & USART_REG_SR_TC_FLAG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	60fb      	str	r3, [r7, #12]
	tmp2 = huart->Instance->CR1 & USART_REG_CR1_TCIE_INT_EN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	60bb      	str	r3, [r7, #8]
	/* UART in mode Transmitter end --------------------------------------------*/
	if ((tmp1) && (tmp2)) {
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <hal_uart_handle_interrupt+0x166>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <hal_uart_handle_interrupt+0x166>
		hal_uart_handle_TC_interrupt(huart);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff1d 	bl	8002084 <hal_uart_handle_TC_interrupt>
	}

	if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <hal_uart_handle_interrupt+0x184>
		/* Set the UART state ready to be able to start again the process */
		huart->tx_state = HAL_UART_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		huart->rx_state = HAL_UART_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		hal_uart_error_cb(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fdd2 	bl	8001e0c <hal_uart_error_cb>
	}
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002274:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002276:	e003      	b.n	8002280 <LoopCopyDataInit>

08002278 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800227a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800227c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800227e:	3104      	adds	r1, #4

08002280 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002284:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002286:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002288:	d3f6      	bcc.n	8002278 <CopyDataInit>
  ldr  r2, =_sbss
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800228c:	e002      	b.n	8002294 <LoopFillZerobss>

0800228e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800228e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002290:	f842 3b04 	str.w	r3, [r2], #4

08002294 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002296:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002298:	d3f9      	bcc.n	800228e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229a:	f7ff fc69 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f000 f811 	bl	80022c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a2:	f7ff f949 	bl	8001538 <main>
  bx  lr    
 80022a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022ac:	0800232c 	.word	0x0800232c
  ldr  r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022b4:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80022b8:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80022bc:	20000194 	.word	0x20000194

080022c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC_IRQHandler>
	...

080022c4 <__libc_init_array>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4d0d      	ldr	r5, [pc, #52]	; (80022fc <__libc_init_array+0x38>)
 80022c8:	4c0d      	ldr	r4, [pc, #52]	; (8002300 <__libc_init_array+0x3c>)
 80022ca:	1b64      	subs	r4, r4, r5
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	2600      	movs	r6, #0
 80022d0:	42a6      	cmp	r6, r4
 80022d2:	d109      	bne.n	80022e8 <__libc_init_array+0x24>
 80022d4:	4d0b      	ldr	r5, [pc, #44]	; (8002304 <__libc_init_array+0x40>)
 80022d6:	4c0c      	ldr	r4, [pc, #48]	; (8002308 <__libc_init_array+0x44>)
 80022d8:	f000 f818 	bl	800230c <_init>
 80022dc:	1b64      	subs	r4, r4, r5
 80022de:	10a4      	asrs	r4, r4, #2
 80022e0:	2600      	movs	r6, #0
 80022e2:	42a6      	cmp	r6, r4
 80022e4:	d105      	bne.n	80022f2 <__libc_init_array+0x2e>
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ec:	4798      	blx	r3
 80022ee:	3601      	adds	r6, #1
 80022f0:	e7ee      	b.n	80022d0 <__libc_init_array+0xc>
 80022f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f6:	4798      	blx	r3
 80022f8:	3601      	adds	r6, #1
 80022fa:	e7f2      	b.n	80022e2 <__libc_init_array+0x1e>
 80022fc:	08002324 	.word	0x08002324
 8002300:	08002324 	.word	0x08002324
 8002304:	08002324 	.word	0x08002324
 8002308:	08002328 	.word	0x08002328

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
