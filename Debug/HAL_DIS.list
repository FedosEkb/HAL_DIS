
HAL_DIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001148  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012d0  080012d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012d0  080012d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080012d0  080012d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d0  080012d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d0  080012d0  000112d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080012d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  080012e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080012e8  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003687  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ac2  00000000  00000000  000236c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  00024488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194ac  00000000  00000000  00024728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002760  00000000  00000000  0003dbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db10  00000000  00000000  00040334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cde44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bc0  00000000  00000000  000cde98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012b8 	.word	0x080012b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080012b8 	.word	0x080012b8

080001c8 <hal_spi_configure_phase_and_polarity>:
 * @param  phase : configures phase ,
 * @param  polarity : configures polarity
 * @retval None
 */
void hal_spi_configure_phase_and_polarity(SPI_TypeDef *SPIx,
		uint32_t phase_value, uint32_t polarity) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	if (phase_value) {
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d006      	beq.n	80001e8 <hal_spi_configure_phase_and_polarity+0x20>
		SPIx->CR1 |= SPI_REG_CR1_CPHA;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0201 	orr.w	r2, r3, #1
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	e005      	b.n	80001f4 <hal_spi_configure_phase_and_polarity+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPHA;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f023 0201 	bic.w	r2, r3, #1
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	601a      	str	r2, [r3, #0]
	}
	if (polarity) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d006      	beq.n	8000208 <hal_spi_configure_phase_and_polarity+0x40>
		SPIx->CR1 |= SPI_REG_CR1_CPOL;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0202 	orr.w	r2, r3, #2
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
	}
}
 8000206:	e005      	b.n	8000214 <hal_spi_configure_phase_and_polarity+0x4c>
		SPIx->CR1 &= ~SPI_REG_CR1_CPOL;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f023 0202 	bic.w	r2, r3, #2
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <hal_spi_configure_device_mode>:
 * @brief  Configures master or slave mode
 * @param  *SPIx : Base address of the SPI
 * @param  master : if 1 , then configured for master
 * @retval None
 */
void hal_spi_configure_device_mode(SPI_TypeDef *SPIx, uint32_t master) {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	if (master) {
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d006      	beq.n	800023e <hal_spi_configure_device_mode+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_MSTR;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f043 0204 	orr.w	r2, r3, #4
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
	}
}
 800023c:	e005      	b.n	800024a <hal_spi_configure_device_mode+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_MSTR;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f023 0204 	bic.w	r2, r3, #4
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <hal_spi_configure_datasize>:
 * @param  datasize : data size to be configured  ,
 * @param  lsbmsbfirst : if 1, LSB will be sent first.
 * @retval None
 */
void hal_spi_configure_datasize(SPI_TypeDef *SPIx, uint32_t datasize_16,
		uint32_t lsbfirst) {
 8000256:	b480      	push	{r7}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	60f8      	str	r0, [r7, #12]
 800025e:	60b9      	str	r1, [r7, #8]
 8000260:	607a      	str	r2, [r7, #4]
	if (datasize_16) {
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d006      	beq.n	8000276 <hal_spi_configure_datasize+0x20>
		SPIx->CR1 |= SPI_REG_CR1_DFF;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	e005      	b.n	8000282 <hal_spi_configure_datasize+0x2c>
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_DFF;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]
	}
	if (lsbfirst) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d006      	beq.n	8000296 <hal_spi_configure_datasize+0x40>
		SPIx->CR1 |= SPI_CR1_LSBFIRST;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
	}
}
 8000294:	e005      	b.n	80002a2 <hal_spi_configure_datasize+0x4c>
		SPIx->CR1 &= ~SPI_CR1_LSBFIRST;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <hal_spi_configure_nss_master>:
 * @brief  Configures the NSS pin of the master
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_master(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00c      	beq.n	80002d8 <hal_spi_configure_nss_master+0x2a>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	601a      	str	r2, [r3, #0]
		SPIx->CR1 |= SPI_REG_CR1_SSI;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}
}
 80002d6:	e005      	b.n	80002e4 <hal_spi_configure_nss_master+0x36>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <hal_spi_configure_nss_slave>:
 * @brief  Configures the NSS pin of the slave
 * @param  *SPIx : Base address of the SPI
 * @param  ssm_enable : enable or disable software chip select
 * @retval None
 */
void hal_spi_configure_nss_slave(SPI_TypeDef *SPIx, uint32_t ssm_enable) {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	if (ssm_enable) {
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d006      	beq.n	800030e <hal_spi_configure_nss_slave+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_SSM;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
	}

}
 800030c:	e005      	b.n	800031a <hal_spi_configure_nss_slave+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_SSM;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <hal_spi_configure_baudrate>:
 * @brief  Configures SPI baudrate
 * @param  *SPIx : Base address of the SPI
 * @param  pre_scalar_value : pre scalar value to be used to generate baudrate
 * @retval None
 */
void hal_spi_configure_baudrate(SPI_TypeDef *SPIx, uint32_t pre_scalar_value) {
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
	if (pre_scalar_value > 7)
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2b07      	cmp	r3, #7
 8000334:	d904      	bls.n	8000340 <hal_spi_configure_baudrate+0x1a>
		SPIx->CR1 |= (0x00 << 3); //if pre_scalar_value > 7,then use default . that is 0
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	601a      	str	r2, [r3, #0]
	else
		SPIx->CR1 |= (pre_scalar_value << 3);
}
 800033e:	e006      	b.n	800034e <hal_spi_configure_baudrate+0x28>
		SPIx->CR1 |= (pre_scalar_value << 3);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	431a      	orrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <hal_spi_configure_direction>:
 * @brief  Configures SPI direction
 * @param  *SPIx : Base address of the SPI
 * @param  direction : if 1, direction will be single line bi-directional else, 2 lines uni directional
 * @retval None
 */
void hal_spi_configure_direction(SPI_TypeDef *SPIx, uint32_t direction) {
 800035a:	b480      	push	{r7}
 800035c:	b083      	sub	sp, #12
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]
	if (direction) {
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d006      	beq.n	8000378 <hal_spi_configure_direction+0x1e>
		SPIx->CR1 |= SPI_REG_CR1_BIDIMODE;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
	} else {
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
	}
}
 8000376:	e005      	b.n	8000384 <hal_spi_configure_direction+0x2a>
		SPIx->CR1 &= ~SPI_REG_CR1_BIDIMODE;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <hal_spi_disable_txe_interrupt>:
/*
 * @brief  Disables the Tx buffer empty interrupt (TXE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_txe_interrupt(SPI_TypeDef *SPIx) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_TXEIE_ENABLE;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	605a      	str	r2, [r3, #4]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <hal_spi_disable_rxne_interrupt>:
/*
 * @brief  Disables the RX buffer non empty interrupt (RXNE)
 * @param  *SPIx : Base address of the SPI
 * @retval None
 */
static void hal_spi_disable_rxne_interrupt(SPI_TypeDef *SPIx) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	SPIx->CR2 &= ~SPI_REG_CR2_RXNEIE_ENABLE;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	605a      	str	r2, [r3, #4]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <hal_spi_init>:
/*
 * @brief  API used to do initialize the given SPI device
 * @param  *spi_handle : Pointer to SPI init structure
 * @retval void
 */
void hal_spi_init(spi_handle_t *spi_handle) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	/* configure the phase and polartiy */
	hal_spi_configure_phase_and_polarity(spi_handle->Instance,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6959      	ldr	r1, [r3, #20]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	691b      	ldr	r3, [r3, #16]
 80003e4:	461a      	mov	r2, r3
 80003e6:	f7ff feef 	bl	80001c8 <hal_spi_configure_phase_and_polarity>
			spi_handle->Init.CLKPhase, spi_handle->Init.CLKPolarity);

	/* Configure the spi device mode */
	hal_spi_configure_device_mode(spi_handle->Instance, spi_handle->Init.Mode);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	4619      	mov	r1, r3
 80003f4:	4610      	mov	r0, r2
 80003f6:	f7ff ff13 	bl	8000220 <hal_spi_configure_device_mode>

	/* Configure the spi data size */
	hal_spi_configure_datasize(spi_handle->Instance, spi_handle->Init.DataSize,
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6818      	ldr	r0, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68d9      	ldr	r1, [r3, #12]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	461a      	mov	r2, r3
 8000408:	f7ff ff25 	bl	8000256 <hal_spi_configure_datasize>
			spi_handle->Init.FirstBit);

	/* Configure the slave select line */
	if (spi_handle->Init.Mode == SPI_MASTER_MODE_SEL)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d108      	bne.n	8000426 <hal_spi_init+0x56>
		hal_spi_configure_nss_master(spi_handle->Instance,
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4619      	mov	r1, r3
 800041e:	4610      	mov	r0, r2
 8000420:	f7ff ff45 	bl	80002ae <hal_spi_configure_nss_master>
 8000424:	e007      	b.n	8000436 <hal_spi_init+0x66>
				spi_handle->Init.NSS);
	else
		hal_spi_configure_nss_slave(spi_handle->Instance, spi_handle->Init.NSS);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4619      	mov	r1, r3
 8000430:	4610      	mov	r0, r2
 8000432:	f7ff ff5d 	bl	80002f0 <hal_spi_configure_nss_slave>

	/* Configure the  SPI deivce speed */
	hal_spi_configure_baudrate(spi_handle->Instance,
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4619      	mov	r1, r3
 8000440:	4610      	mov	r0, r2
 8000442:	f7ff ff70 	bl	8000326 <hal_spi_configure_baudrate>
			spi_handle->Init.BaudRatePrescaler);

	/* Configure the SPI device direction */
	hal_spi_configure_direction(spi_handle->Instance,
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4619      	mov	r1, r3
 8000450:	4610      	mov	r0, r2
 8000452:	f7ff ff82 	bl	800035a <hal_spi_configure_direction>
			spi_handle->Init.Direction);
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <hal_spi_is_bus_busy>:
/*
 * @brief  Checks whether bus is free or busy
 * @param  *SPIx : Base address of the SPI
 * @retval return 1, if bus is busy
 */
uint8_t hal_spi_is_bus_busy(SPI_TypeDef *SPIx) {
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
	if (SPIx->SR & SPI_REG_SR_BUSY_FLAG) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <hal_spi_is_bus_busy+0x18>
		return SPI_IS_BUSY;
 8000472:	2301      	movs	r3, #1
 8000474:	e000      	b.n	8000478 <hal_spi_is_bus_busy+0x1a>
	} else
		return SPI_IS_NOT_BUSY;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <hal_spi_tx_close_interrupt>:
 * @brief   close Tx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_tx_close_interrupt(spi_handle_t *hspi) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	/* Disable TXE interrupt */
	hal_spi_disable_txe_interrupt(hspi->Instance);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff7d 	bl	8000390 <hal_spi_disable_txe_interrupt>

	/* if master and if driver state is not HAL_SPI_STATE_BUSY_RX then make state = READY */
	if (hspi->Init.Mode && (hspi->State != HAL_SPI_STATE_BUSY_RX))
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d008      	beq.n	80004b0 <hal_spi_tx_close_interrupt+0x2c>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80004a4:	2b22      	cmp	r3, #34	; 0x22
 80004a6:	d003      	beq.n	80004b0 <hal_spi_tx_close_interrupt+0x2c>
		hspi->State = HAL_SPI_STATE_READY;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2201      	movs	r2, #1
 80004ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <hal_spi_handle_tx_interrupt>:
 *               the configuration information for SPI module.
 * @retval void
 */


void hal_spi_handle_tx_interrupt(spi_handle_t *hspi) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Transmit data in 8 Bit mode */
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d10f      	bne.n	80004e8 <hal_spi_handle_tx_interrupt+0x30>
		hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004cc:	1c59      	adds	r1, r3, #1
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	6251      	str	r1, [r2, #36]	; 0x24
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60da      	str	r2, [r3, #12]
		hspi->TxXferCount--; //we sent 1 byte
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80004de:	3b01      	subs	r3, #1
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80004e6:	e010      	b.n	800050a <hal_spi_handle_tx_interrupt+0x52>
	} else { /* Transmit data in 16 Bit mode */
		hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	60da      	str	r2, [r3, #12]
		hspi->pTxBuffPtr += 2;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f8:	1c9a      	adds	r2, r3, #2
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->TxXferCount -= 2; //we sent 2 bytes in one go
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000502:	3b02      	subs	r3, #2
 8000504:	b29a      	uxth	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	if (hspi->TxXferCount == 0) /* we reached end of transmission, so close the txe interrupt */
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800050e:	2b00      	cmp	r3, #0
 8000510:	d102      	bne.n	8000518 <hal_spi_handle_tx_interrupt+0x60>
		hal_spi_tx_close_interrupt(hspi);
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ffb6 	bl	8000484 <hal_spi_tx_close_interrupt>

}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <hal_spi_close_rx_interrupt>:
 * @brief   close Rx transfer
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_close_rx_interrupt(spi_handle_t *hspi) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	while (hal_spi_is_bus_busy(hspi->Instance))
 8000528:	bf00      	nop
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff95 	bl	800045e <hal_spi_is_bus_busy>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f7      	bne.n	800052a <hal_spi_close_rx_interrupt+0xa>
		; /* Disable RXNE interrupt */

	hal_spi_disable_rxne_interrupt(hspi->Instance);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff36 	bl	80003b0 <hal_spi_disable_rxne_interrupt>
	hspi->State = HAL_SPI_STATE_READY;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2201      	movs	r2, #1
 8000548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <hal_spi_handle_rx_interrupt>:
 * @brief   handles  RXNE interrupt
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval void
 */
static void hal_spi_handle_rx_interrupt(spi_handle_t *hspi) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (hspi->Init.DataSize == SPI_8BIT_DF_ENABLE) { /* Receive data in 8 Bit mode */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d114      	bne.n	800058e <hal_spi_handle_rx_interrupt+0x3a>

		if (hspi->pRxBuffPtr) //NULL check
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000568:	2b00      	cmp	r3, #0
 800056a:	d009      	beq.n	8000580 <hal_spi_handle_rx_interrupt+0x2c>
			(*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68d8      	ldr	r0, [r3, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	1c59      	adds	r1, r3, #1
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800057c:	b2c2      	uxtb	r2, r0
 800057e:	701a      	strb	r2, [r3, #0]
		hspi->RxXferCount--;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000584:	3b01      	subs	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	865a      	strh	r2, [r3, #50]	; 0x32
 800058c:	e011      	b.n	80005b2 <hal_spi_handle_rx_interrupt+0x5e>
	} else { /* Receive data in 16 Bit mode */
		*((uint16_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000598:	b292      	uxth	r2, r2
 800059a:	801a      	strh	r2, [r3, #0]
		hspi->pRxBuffPtr += 2;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a0:	1c9a      	adds	r2, r3, #2
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->RxXferCount -= 2;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80005aa:	3b02      	subs	r3, #2
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	if (hspi->RxXferCount == 0) { /*We are done with the Rxing of data, lets close the rxne interrupt */
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d102      	bne.n	80005c0 <hal_spi_handle_rx_interrupt+0x6c>
		hal_spi_close_rx_interrupt(hspi);
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ffb0 	bl	8000520 <hal_spi_close_rx_interrupt>
	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <hal_spi_irq_handler>:
 * @brief  This function handles SPI interrupt request.
 * @param  hspi: pointer to a spi_handle_t structure that contains
 *                the configuration information for SPI module.
 * @retval none
 */
void hal_spi_irq_handler(spi_handle_t *hspi) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp1 = 0, tmp2 = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]

	/* check to see RXNE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_RXNE_FLAG);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	/* check whether RXNEIE bit is enabled in the control register. */
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_RXNEIE_ENABLE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ee:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <hal_spi_irq_handler+0x3c>
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <hal_spi_irq_handler+0x3c>
		/* RXNE flag is set
		 * handle the RX of data bytes
		 */
		hal_spi_handle_rx_interrupt(hspi);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffa9 	bl	8000554 <hal_spi_handle_rx_interrupt>
		return;
 8000602:	e015      	b.n	8000630 <hal_spi_irq_handler+0x68>
	}

	/* check to see TXE is set in the status register */
	tmp1 = (hspi->Instance->SR & SPI_REG_SR_TXE_FLAG);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
	tmp2 = (hspi->Instance->CR2 & SPI_REG_CR2_TXEIE_ENABLE);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	60bb      	str	r3, [r7, #8]

	if ((tmp1 != RESET) && (tmp2 != RESET)) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <hal_spi_irq_handler+0x68>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <hal_spi_irq_handler+0x68>
		/* TXE flag is set
		 * handle the TX of data bytes
		 */
		hal_spi_handle_tx_interrupt(hspi);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff45 	bl	80004b8 <hal_spi_handle_tx_interrupt>
		return;
 800062e:	bf00      	nop
	}

}
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db0b      	blt.n	8000662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 021f 	and.w	r2, r3, #31
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <__NVIC_EnableIRQ+0x38>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100

08000674 <hal_gpio_configure_pin_mode>:
 * @param	mode			: mode to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t mode) {
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	460b      	mov	r3, r1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER &= ~(0x03 << (2 * pin_no));
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	897a      	ldrh	r2, [r7, #10]
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	2103      	movs	r1, #3
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	43d2      	mvns	r2, r2
 8000692:	401a      	ands	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << (2 * pin_no));
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	897b      	ldrh	r3, [r7, #10]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	431a      	orrs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <hal_gpio_configure_pin_otype>:
 * @param	op_type			: output type to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t op_type) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	460b      	mov	r3, r1
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (pin_no));
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	431a      	orrs	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	605a      	str	r2, [r3, #4]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <hal_gpio_configure_pin_speed>:
 * @param	speed			: speed to be configured
 * @retval	void
 */

static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t speed) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	460b      	mov	r3, r1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	897b      	ldrh	r3, [r7, #10]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	431a      	orrs	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	609a      	str	r2, [r3, #8]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <hal_gpio_configure_pin_resistor>:
 * @param	resistor		: pull up, push down, nothing
 * @retval	void
 */

static void hal_gpio_configure_pin_resistor(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint32_t resistor) {
 8000712:	b480      	push	{r7}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	60f8      	str	r0, [r7, #12]
 800071a:	460b      	mov	r3, r1
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	817b      	strh	r3, [r7, #10]
	GPIOx->PUPDR |= (resistor << (2 * pin_no));
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	897b      	ldrh	r3, [r7, #10]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	431a      	orrs	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	60da      	str	r2, [r3, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <hal_gpio_set_alt_function>:
 * @param	pin_no			: GPIO pin number
 * @param	alt_fun_value	: alternate function to be configured
 * @retval	void
 */
void hal_gpio_set_alt_function(GPIO_TypeDef *GPIOx, uint16_t pin_no,
		uint16_t alt_fun_value) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
 800074c:	4613      	mov	r3, r2
 800074e:	803b      	strh	r3, [r7, #0]
	if (pin_no <= 7)
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d80a      	bhi.n	800076c <hal_gpio_set_alt_function+0x2c>
		GPIOx->AFR[0] |= (alt_fun_value << (4 * pin_no));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6a1b      	ldr	r3, [r3, #32]
 800075a:	8839      	ldrh	r1, [r7, #0]
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	621a      	str	r2, [r3, #32]
	else
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
}
 800076a:	e00b      	b.n	8000784 <hal_gpio_set_alt_function+0x44>
		GPIOx->AFR[1] |= (alt_fun_value << (4 * (pin_no % 8)));
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	8839      	ldrh	r1, [r7, #0]
 8000772:	887a      	ldrh	r2, [r7, #2]
 8000774:	f002 0207 	and.w	r2, r2, #7
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <hal_gpio_read_from_pin>:
 * @param	*GPIOx 			: pointer to GPIO Port base address
 * @param	pin_no			: GPIO pin number
 * @retval	uint8_t			: Value read
 */

uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
	return (uint8_t)((GPIOx->IDR >> pin_no) & 0x00000001);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	691a      	ldr	r2, [r3, #16]
 80007a0:	887b      	ldrh	r3, [r7, #2]
 80007a2:	fa22 f303 	lsr.w	r3, r2, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <hal_gpio_write_to_pin>:
 * @param	pin_no			: GPIO pin number
 * @param	value			: value to write
 * @retval	void
 */

void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value) {
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	807b      	strh	r3, [r7, #2]
 80007c6:	4613      	mov	r3, r2
 80007c8:	707b      	strb	r3, [r7, #1]
	if (value)
 80007ca:	787b      	ldrb	r3, [r7, #1]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d009      	beq.n	80007e4 <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	887a      	ldrh	r2, [r7, #2]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);
}
 80007e2:	e009      	b.n	80007f8 <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	887a      	ldrh	r2, [r7, #2]
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	615a      	str	r2, [r3, #20]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <hal_gpio_init>:

void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]

	hal_gpio_configure_pin_mode(GPIOx, gpio_pin_conf->pin, gpio_pin_conf->mode); // set pin mode from input structure
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	b299      	uxth	r1, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	461a      	mov	r2, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff2a 	bl	8000674 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_otype(GPIOx, gpio_pin_conf->pin,
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b299      	uxth	r1, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	461a      	mov	r2, r3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff43 	bl	80006b8 <hal_gpio_configure_pin_otype>
			gpio_pin_conf->op_type);
	hal_gpio_configure_pin_resistor(GPIOx, gpio_pin_conf->pin,
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	b299      	uxth	r1, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	461a      	mov	r2, r3
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ff67 	bl	8000712 <hal_gpio_configure_pin_resistor>
			gpio_pin_conf->pull);
	hal_gpio_configure_pin_speed(GPIOx, gpio_pin_conf->pin,
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	b299      	uxth	r1, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	461a      	mov	r2, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff47 	bl	80006e4 <hal_gpio_configure_pin_speed>
			gpio_pin_conf->speed);

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <hal_gpio_configure_interrupt>:

void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	717b      	strb	r3, [r7, #5]


	EXTI->FTSR &= ~(1 << pin_no);
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000882:	400b      	ands	r3, r1
 8000884:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << pin_no);
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	2101      	movs	r1, #1
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	43d2      	mvns	r2, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 8000898:	400b      	ands	r3, r1
 800089a:	6093      	str	r3, [r2, #8]
	if ((edge_sel == INT_FALLING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 800089c:	797b      	ldrb	r3, [r7, #5]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d002      	beq.n	80008a8 <hal_gpio_configure_interrupt+0x48>
 80008a2:	797b      	ldrb	r3, [r7, #5]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d109      	bne.n	80008bc <hal_gpio_configure_interrupt+0x5c>
		EXTI->FTSR |= (1 << pin_no);
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	60d3      	str	r3, [r2, #12]
	if ((edge_sel == INT_RISING_EDGE) || (edge_sel == INT_FALLING_RISING_EDGE))
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <hal_gpio_configure_interrupt+0x68>
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d109      	bne.n	80008dc <hal_gpio_configure_interrupt+0x7c>
		EXTI->RTSR |= (1 << pin_no);
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <hal_gpio_configure_interrupt+0x88>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6093      	str	r3, [r2, #8]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40013c00 	.word	0x40013c00

080008ec <hal_gpio_enable_interrupt>:

void hal_gpio_enable_interrupt(uint16_t pin_no,IRQn_Type irq_no){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	460a      	mov	r2, r1
 80008f6:	80fb      	strh	r3, [r7, #6]
 80008f8:	4613      	mov	r3, r2
 80008fa:	717b      	strb	r3, [r7, #5]

	EXTI->IMR |= (1 << pin_no);
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <hal_gpio_enable_interrupt+0x38>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	4611      	mov	r1, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <hal_gpio_enable_interrupt+0x38>)
 800090c:	430b      	orrs	r3, r1
 800090e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 8000910:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe8f 	bl	8000638 <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40013c00 	.word	0x40013c00

08000928 <hal_gpio_clear_interrupt>:

void hal_gpio_clear_interrupt(uint16_t pin_no) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
	if (EXTI->PR & (1 << pin_no))
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <hal_gpio_clear_interrupt+0x3c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	88fa      	ldrh	r2, [r7, #6]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d009      	beq.n	8000958 <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin_no);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <hal_gpio_clear_interrupt+0x3c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <hal_gpio_clear_interrupt+0x3c>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6153      	str	r3, [r2, #20]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40013c00 	.word	0x40013c00

08000968 <hal_i2c_enable_peripheral>:
/*                                                                            */
/*                      Driver exposed APIs                                   */
/*                                                                            */
/******************************************************************************/

void hal_i2c_enable_peripheral(I2C_TypeDef *i2cx) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	i2cx->CR1 |= I2C_REG_CR1_ENABLE_I2C;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f043 0201 	orr.w	r2, r3, #1
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <hal_i2c_set_own_address1>:

static void hal_i2c_disable_peripheral(I2C_TypeDef *i2cx) {
	i2cx->CR1 &= ~I2C_REG_CR1_ENABLE_I2C;
}

static void hal_i2c_set_own_address1(I2C_TypeDef *i2cx, uint32_t own_address) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
	i2cx->OAR1 &= ~(0x7f << 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	609a      	str	r2, [r3, #8]
	i2cx->OAR1 |= (own_address << 1);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	609a      	str	r2, [r3, #8]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <hal_i2c_manage_clock_stretch>:

static void hal_i2c_manage_clock_stretch(I2C_TypeDef *i2cx, uint32_t no_stretch) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
	if (no_stretch) {
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <hal_i2c_manage_clock_stretch+0x1e>
		i2cx->CR1 |= I2C_REG_CR1_NOSTRETCH;  // disabled clock stretching
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601a      	str	r2, [r3, #0]
	} else {
		i2cx->CR1 &= ~I2C_REG_CR1_NOSTRETCH;
	}
}
 80009d4:	e005      	b.n	80009e2 <hal_i2c_manage_clock_stretch+0x2a>
		i2cx->CR1 &= ~I2C_REG_CR1_NOSTRETCH;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <hal_i2c_configure_ccr>:

static void hal_i2c_configure_ccr(I2C_TypeDef *i2cx, uint32_t pclk, uint32_t clkspeed,
		uint32_t duty_cycle) {
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]

	double Thigh, Tlow, Tpclk;
	uint32_t ccr;
	if (clkspeed <= 100000) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <hal_i2c_configure_ccr+0x80>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d809      	bhi.n	8000a1a <hal_i2c_configure_ccr+0x2a>
		/* configure ccr for standard mode */
		ccr = (pclk * 1000000) / (clkspeed << 1);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <hal_i2c_configure_ccr+0x84>)
 8000a0a:	fb02 f203 	mul.w	r2, r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e01d      	b.n	8000a56 <hal_i2c_configure_ccr+0x66>
	} else {
		if (duty_cycle == I2C_FM_DUTY_2) {
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10a      	bne.n	8000a36 <hal_i2c_configure_ccr+0x46>
			ccr = (pclk * 1000000) / (3 * clkspeed);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <hal_i2c_configure_ccr+0x84>)
 8000a24:	fb02 f103 	mul.w	r1, r2, r3
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a34:	617b      	str	r3, [r7, #20]
		}
		if (duty_cycle == I2C_FM_DUTY_16BY9) {
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10c      	bne.n	8000a56 <hal_i2c_configure_ccr+0x66>
			/* this is to reach 400khz in fm mode */
			ccr = (pclk * 1000000) / (25 * clkspeed);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <hal_i2c_configure_ccr+0x84>)
 8000a40:	fb02 f103 	mul.w	r1, r2, r3
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009a      	lsls	r2, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a54:	617b      	str	r3, [r7, #20]
		}
	}
	i2cx->CCR |= ccr;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	69da      	ldr	r2, [r3, #28]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	61da      	str	r2, [r3, #28]
}
 8000a62:	bf00      	nop
 8000a64:	371c      	adds	r7, #28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	000186a0 	.word	0x000186a0
 8000a74:	000f4240 	.word	0x000f4240

08000a78 <hal_i2c_rise_time_configuration>:

static void hal_i2c_rise_time_configuration(I2C_TypeDef *i2cx, uint32_t freqrange,
		uint32_t ClockSpeed) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	//  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
	uint32_t trise;
	if (ClockSpeed <= 100000) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <hal_i2c_rise_time_configuration+0x58>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d803      	bhi.n	8000a94 <hal_i2c_rise_time_configuration+0x1c>
		trise = freqrange + 1;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e00a      	b.n	8000aaa <hal_i2c_rise_time_configuration+0x32>
	} else {
		trise = (((freqrange * 300) / 1000) + 1);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a9a:	fb02 f303 	mul.w	r3, r2, r3
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <hal_i2c_rise_time_configuration+0x5c>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	099b      	lsrs	r3, r3, #6
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
	}
	i2cx->TRISE &= ~(0x3F);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	621a      	str	r2, [r3, #32]
	i2cx->TRISE |= trise;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6a1a      	ldr	r2, [r3, #32]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	621a      	str	r2, [r3, #32]
}
 8000ac2:	bf00      	nop
 8000ac4:	371c      	adds	r7, #28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	000186a0 	.word	0x000186a0
 8000ad4:	10624dd3 	.word	0x10624dd3

08000ad8 <hal_i2c_clk_init>:

static void hal_i2c_clk_init(I2C_TypeDef *i2cx, uint32_t clkspeed, uint32_t duty_cycle) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	uint32_t pclk = I2C_PERIPHERAL_CLK_FREQ_10MHZ;
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	617b      	str	r3, [r7, #20]
	i2cx->CR2 &= ~(0x3F);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
	i2cx->CR2 |= (0x3F & pclk);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000afe:	431a      	orrs	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	605a      	str	r2, [r3, #4]
	hal_i2c_rise_time_configuration(i2cx, pclk, clkspeed);
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	6979      	ldr	r1, [r7, #20]
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff ffb5 	bl	8000a78 <hal_i2c_rise_time_configuration>
	hal_i2c_configure_ccr(i2cx, pclk, clkspeed, duty_cycle);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	6979      	ldr	r1, [r7, #20]
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff ff6b 	bl	80009f0 <hal_i2c_configure_ccr>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <hal_i2c_set_addressing_mode>:

static void hal_i2c_set_addressing_mode(I2C_TypeDef *i2cx, uint32_t adr_mode) {
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	if (adr_mode == I2C_ADDRMODE_10BI)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d106      	bne.n	8000b40 <hal_i2c_set_addressing_mode+0x1e>
		i2cx->OAR1 |= I2C_REG_OAR1_ADDRMODE;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
	else
		i2cx->OAR1 &= ~I2C_REG_OAR1_ADDRMODE;
}
 8000b3e:	e005      	b.n	8000b4c <hal_i2c_set_addressing_mode+0x2a>
		i2cx->OAR1 &= ~I2C_REG_OAR1_ADDRMODE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <hal_i2c_manage_ack>:
	} else {
		i2cx->CCR &= ~I2C_REG_CCR_DUTY;
	}
}

void hal_i2c_manage_ack(I2C_TypeDef *i2cx, uint32_t ack_noack) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	if (ack_noack == I2C_ACK_ENABLE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d106      	bne.n	8000b76 <hal_i2c_manage_ack+0x1e>
		i2cx->CR1 |= I2C_REG_CR1_ACK;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]
	else
		i2cx->CR1 &= ~I2C_REG_CR1_ACK;
}
 8000b74:	e005      	b.n	8000b82 <hal_i2c_manage_ack+0x2a>
		i2cx->CR1 &= ~I2C_REG_CR1_ACK;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <hal_i2c_configure_tx_rx_interrupt>:

static void hal_i2c_generate_stop_condition(I2C_TypeDef *i2cx) {
	i2cx->CR1 |= I2C_REG_CR1_STOP_GEN;
}

static void hal_i2c_configure_tx_rx_interrupt(I2C_TypeDef *i2cx, uint32_t val) {
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	if (val)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <hal_i2c_configure_tx_rx_interrupt+0x1e>
		i2cx->CR2 |= I2C_REG_CR2_BUF_INT_ENABLE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	605a      	str	r2, [r3, #4]
	else
		i2cx->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
}
 8000baa:	e005      	b.n	8000bb8 <hal_i2c_configure_tx_rx_interrupt+0x2a>
		i2cx->CR2 &= ~I2C_REG_CR2_BUF_INT_ENABLE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	605a      	str	r2, [r3, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <hal_i2c_configure_error_interrupt>:

static void hal_i2c_configure_error_interrupt(I2C_TypeDef *i2cx, uint32_t val) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	if (val)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <hal_i2c_configure_error_interrupt+0x1e>
		i2cx->CR2 |= I2C_REG_CR2_ERR_INT_ENABLE;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	605a      	str	r2, [r3, #4]
	else
		i2cx->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
}
 8000be0:	e005      	b.n	8000bee <hal_i2c_configure_error_interrupt+0x2a>
		i2cx->CR2 &= ~I2C_REG_CR2_ERR_INT_ENABLE;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	605a      	str	r2, [r3, #4]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <hal_i2c_configure_evt_interrupt>:

static void hal_i2c_configure_evt_interrupt(I2C_TypeDef *i2cx, uint32_t val) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
	if (val)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <hal_i2c_configure_evt_interrupt+0x1e>
		i2cx->CR2 |= I2C_REG_CR2_EVT_INT_ENABLE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	605a      	str	r2, [r3, #4]
	else
		i2cx->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
}
 8000c16:	e005      	b.n	8000c24 <hal_i2c_configure_evt_interrupt+0x2a>
		i2cx->CR2 &= ~I2C_REG_CR2_EVT_INT_ENABLE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <hal_i2c_init>:
/*
 *  @brief Initialize the given I2C
 *  @param *handle : Handle to the I2C Peripheral, which the application wants to initialize
 *  @retval None
 */
void hal_i2c_init(i2c_handle_t *handle) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	hal_i2c_clk_init(handle->Instance, handle->Init.ClockSpeed,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6859      	ldr	r1, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	461a      	mov	r2, r3
 8000c46:	f7ff ff47 	bl	8000ad8 <hal_i2c_clk_init>
			handle->Init.DutyCycle);

	hal_i2c_set_addressing_mode(handle->Instance, handle->Init.AddressingMode);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4619      	mov	r1, r3
 8000c54:	4610      	mov	r0, r2
 8000c56:	f7ff ff64 	bl	8000b22 <hal_i2c_set_addressing_mode>

	hal_i2c_manage_ack(handle->Instance, handle->Init.ack_enable);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f7ff ff77 	bl	8000b58 <hal_i2c_manage_ack>

	hal_i2c_manage_clock_stretch(handle->Instance, handle->Init.NoStretchMode);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4610      	mov	r0, r2
 8000c76:	f7ff fe9f 	bl	80009b8 <hal_i2c_manage_clock_stretch>

	hal_i2c_set_own_address1(handle->Instance, handle->Init.OwnAddress1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4619      	mov	r1, r3
 8000c84:	4610      	mov	r0, r2
 8000c86:	f7ff fe7f 	bl	8000988 <hal_i2c_set_own_address1>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <hal_i2c_slave_tx>:
 *  @param *handle : Handle to the I2C Peripheral structure
 *  @param  *buffer : pointer to tx buffer
 *  @param  len : len of the data to be TX in bait
 *  @retval None
 */
void hal_i2c_slave_tx(i2c_handle_t *handle, uint8_t *buffer, uint32_t len) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]

	handle->pBuffPtr = buffer;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
	handle->XferCount = len;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
	handle->XferSize = len;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30

	handle->State = HAL_I2C_STATE_BUSY_TX;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2212      	movs	r2, #18
 8000cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	//while(i2c_bus_busy(handle->Instance) );

	handle->Instance->CR1 &= ~I2C_CR1_POS;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cc6:	601a      	str	r2, [r3, #0]

	hal_i2c_enable_peripheral(handle->Instance);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fe4b 	bl	8000968 <hal_i2c_enable_peripheral>

	/* Enable Address Acknowledge */
	handle->Instance->CR1 |= I2C_CR1_ACK;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ce0:	601a      	str	r2, [r3, #0]

	/* ENABLE the buff, err , event interrupts */
	hal_i2c_configure_tx_rx_interrupt(handle->Instance, 1);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff50 	bl	8000b8e <hal_i2c_configure_tx_rx_interrupt>
	hal_i2c_configure_error_interrupt(handle->Instance, 1);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff65 	bl	8000bc4 <hal_i2c_configure_error_interrupt>
	hal_i2c_configure_evt_interrupt(handle->Instance, 1);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff7a 	bl	8000bfa <hal_i2c_configure_evt_interrupt>
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <hal_i2c_slave_rx>:
 *  @param *handle : Handle to the I2C Peripheral structure
 *  @param  *buffer : pointer to Rx buffer
 *  @param  len : len of the data to be Rx in bait
 *  @retval None
 */
void hal_i2c_slave_rx(i2c_handle_t *handle, uint8_t *buffer, uint32_t len) {
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
	handle->pBuffPtr = buffer;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	handle->XferCount = len;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
	handle->XferSize = len;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	631a      	str	r2, [r3, #48]	; 0x30

	handle->State = HAL_I2C_STATE_BUSY_RX;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2222      	movs	r2, #34	; 0x22
 8000d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	uint32_t val;

	//while(12c_bus_busy(handle->Instance) );

	handle->Instance->CR1 &= ~I2C_CR1_POS;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d42:	601a      	str	r2, [r3, #0]

	hal_i2c_enable_peripheral(handle->Instance);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fe0d 	bl	8000968 <hal_i2c_enable_peripheral>

	handle->Instance->CR1 |= I2C_CR1_ACK;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d5c:	601a      	str	r2, [r3, #0]

	/* disable the buff, err , event interrupts */
	hal_i2c_configure_tx_rx_interrupt(handle->Instance, 1);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff12 	bl	8000b8e <hal_i2c_configure_tx_rx_interrupt>
	hal_i2c_configure_error_interrupt(handle->Instance, 1);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff27 	bl	8000bc4 <hal_i2c_configure_error_interrupt>
	hal_i2c_configure_evt_interrupt(handle->Instance, 1);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff3c 	bl	8000bfa <hal_i2c_configure_evt_interrupt>
	val = handle->Instance->CR1;
	val = handle->Instance->OAR1;
#else
	UNUSED(val);
#endif
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <__NVIC_EnableIRQ>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <main>:
#endif

int main(void)


{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	uint8_t rcv_cmd[2];
	uint8_t ack_buf[2] = { 0XD5, 0XE5 };
	uint16_t master_cmd;
#endif

	spi_gpio_init();
 8000dcc:	f000 f966 	bl	800109c <spi_gpio_init>
	led_init();  										// configure LED
 8000dd0:	f000 f8dc 	bl	8000f8c <led_init>
	i2c_gpio_init();
 8000dd4:	f000 f930 	bl	8001038 <i2c_gpio_init>
	button_init();  /* Configure USER Button as ext interrupt throw EXTI0 */
 8000dd8:	f000 f9a2 	bl	8001120 <button_init>
	 ******************************************************************************
	 	 	 	 	 	 	 	 	 	 SPI CONFIG
	 ******************************************************************************
	 */

	_HAL_RCC_SPI2_CLK_ENABLE();
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <main+0x198>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a5f      	ldr	r2, [pc, #380]	; (8000f60 <main+0x198>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40

	/*fill up the SPI handle structure */
	SpiHandle.Instance				= SPI_2;
 8000de8:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <main+0x19c>)
 8000dea:	4a5f      	ldr	r2, [pc, #380]	; (8000f68 <main+0x1a0>)
 8000dec:	601a      	str	r2, [r3, #0]

	SpiHandle.Init.BaudRatePrescaler = SPI_REG_CR1_BR_PCLK_DIV_32;
 8000dee:	4b5d      	ldr	r3, [pc, #372]	; (8000f64 <main+0x19c>)
 8000df0:	2220      	movs	r2, #32
 8000df2:	61da      	str	r2, [r3, #28]
	SpiHandle.Init.Direction         = SPI_ENABLE_2_LINE_UNI_DIR;
 8000df4:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <main+0x19c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
	SpiHandle.Init.CLKPhase          = SPI_SECOND_CLOCK_TRANS;
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <main+0x19c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	615a      	str	r2, [r3, #20]
	SpiHandle.Init.CLKPolarity       = SPI_CPOL_LOW;
 8000e00:	4b58      	ldr	r3, [pc, #352]	; (8000f64 <main+0x19c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
	SpiHandle.Init.DataSize          = SPI_8BIT_DF_ENABLE;
 8000e06:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <main+0x19c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
	SpiHandle.Init.FirstBit          = SPI_MSB_FIRST;
 8000e0c:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <main+0x19c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
	SpiHandle.Init.NSS               = SPI_SSM_ENABLE;
 8000e12:	4b54      	ldr	r3, [pc, #336]	; (8000f64 <main+0x19c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	619a      	str	r2, [r3, #24]
	SpiHandle.Init.Mode              = SPI_SLAVE_MODE_SEL;
 8000e18:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <main+0x19c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]

	SpiHandle.State = HAL_SPI_STATE_READY;
 8000e1e:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <main+0x19c>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Call driver API to initialize the SPI device */
	hal_spi_init(&SpiHandle);
 8000e26:	484f      	ldr	r0, [pc, #316]	; (8000f64 <main+0x19c>)
 8000e28:	f7ff fad2 	bl	80003d0 <hal_spi_init>

	/* Enable the IRQs in the NVIC */
	NVIC_EnableIRQ(SPI2_IRQn);
 8000e2c:	2024      	movs	r0, #36	; 0x24
 8000e2e:	f7ff ffad 	bl	8000d8c <__NVIC_EnableIRQ>
	/**
	 ******************************************************************************
	 	 	 	 	 	 	 	 	 	I2C CONFIG
	 ******************************************************************************
	 */
	_HAL_RCC_I2C1_CLK_ENABLE();
 8000e32:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <main+0x198>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a4a      	ldr	r2, [pc, #296]	; (8000f60 <main+0x198>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
	i2c_handle.Instance = I2C_1;        // base address in memory
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <main+0x1a4>)
 8000e40:	4a4b      	ldr	r2, [pc, #300]	; (8000f70 <main+0x1a8>)
 8000e42:	601a      	str	r2, [r3, #0]
	i2c_handle.Init.ack_enable = I2C_ACK_ENABLE;
 8000e44:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <main+0x1a4>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
	i2c_handle.Init.AddressingMode = I2C_ADDRMODE_7BIT;
 8000e4a:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <main+0x1a4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
	i2c_handle.Init.ClockSpeed = 100000;
 8000e50:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <main+0x1a4>)
 8000e52:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <main+0x1ac>)
 8000e54:	605a      	str	r2, [r3, #4]
	i2c_handle.Init.DutyCycle = I2C_FM_DUTY_2; //care needs to taken
 8000e56:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <main+0x1a4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	i2c_handle.Init.GeneralCallMode = 0;
 8000e5c:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <main+0x1a4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
	i2c_handle.Init.NoStretchMode = I2C_ENABLE_CLK_STRETCH;
 8000e62:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <main+0x1a4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
	i2c_handle.Init.OwnAddress1 = SLAVE_OWN_ADDRESS	;
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <main+0x1a4>)
 8000e6a:	2253      	movs	r2, #83	; 0x53
 8000e6c:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8000e6e:	2022      	movs	r0, #34	; 0x22
 8000e70:	f7ff ff8c 	bl	8000d8c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8000e74:	2021      	movs	r0, #33	; 0x21
 8000e76:	f7ff ff89 	bl	8000d8c <__NVIC_EnableIRQ>

	hal_i2c_init(&i2c_handle);
 8000e7a:	483c      	ldr	r0, [pc, #240]	; (8000f6c <main+0x1a4>)
 8000e7c:	f7ff fed8 	bl	8000c30 <hal_i2c_init>
	hal_i2c_enable_peripheral(i2c_handle.Instance); // It need for something. I think 2IC enable occur in TX/RX function
 8000e80:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <main+0x1a4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fd6f 	bl	8000968 <hal_i2c_enable_peripheral>

	//hal_gpio_enable_interrupt(0);

	//val = i2c_handle.Instance->CR1;
	i2c_handle.State = HAL_I2C_STATE_READY;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <main+0x1a4>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	/*while (TestReady != SET) {
		led_toggle(GPIOD, LED_RED);
		//LED3 (orange)
		delay_gen();
	}*/
	hal_gpio_write_to_pin(GPIOD, LED_RED, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	210e      	movs	r1, #14
 8000e96:	4838      	ldr	r0, [pc, #224]	; (8000f78 <main+0x1b0>)
 8000e98:	f7ff fc8f 	bl	80007ba <hal_gpio_write_to_pin>

	while (1) {
#ifdef I2C_TEST
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000e9c:	bf00      	nop
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <main+0x1a4>)
 8000ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d1fa      	bne.n	8000e9e <main+0xd6>

		delay_gen();

#else   // code for SLAVE implementation
		/* first rcv the command from the master */
		hal_i2c_slave_rx(&i2c_handle, &slave_rcv_cmd, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4934      	ldr	r1, [pc, #208]	; (8000f7c <main+0x1b4>)
 8000eac:	482f      	ldr	r0, [pc, #188]	; (8000f6c <main+0x1a4>)
 8000eae:	f7ff ff2e 	bl	8000d0e <hal_i2c_slave_rx>
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000eb2:	bf00      	nop
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <main+0x1a4>)
 8000eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1fa      	bne.n	8000eb4 <main+0xec>
			;

		if (slave_rcv_cmd == MASTER_WRITE_CMD) {
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <main+0x1b4>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2bc1      	cmp	r3, #193	; 0xc1
 8000ec4:	d12e      	bne.n	8000f24 <main+0x15c>
			//prepare to rcv from the master
			//first rcv no bytes to be written by master
			hal_i2c_slave_rx(&i2c_handle, &slave_rcv_cmd, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	492c      	ldr	r1, [pc, #176]	; (8000f7c <main+0x1b4>)
 8000eca:	4828      	ldr	r0, [pc, #160]	; (8000f6c <main+0x1a4>)
 8000ecc:	f7ff ff1f 	bl	8000d0e <hal_i2c_slave_rx>
			while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000ed0:	bf00      	nop
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <main+0x1a4>)
 8000ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1fa      	bne.n	8000ed2 <main+0x10a>
				;
			memset(slave_rx_buffer, 0, sizeof(slave_rx_buffer));
 8000edc:	2205      	movs	r2, #5
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4827      	ldr	r0, [pc, #156]	; (8000f80 <main+0x1b8>)
 8000ee2:	f000 f9e1 	bl	80012a8 <memset>
			hal_i2c_slave_rx(&i2c_handle, slave_rx_buffer, slave_rcv_cmd);
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <main+0x1b4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4924      	ldr	r1, [pc, #144]	; (8000f80 <main+0x1b8>)
 8000eee:	481f      	ldr	r0, [pc, #124]	; (8000f6c <main+0x1a4>)
 8000ef0:	f7ff ff0d 	bl	8000d0e <hal_i2c_slave_rx>
			while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000ef4:	bf00      	nop
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <main+0x1a4>)
 8000ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d1fa      	bne.n	8000ef6 <main+0x12e>
				;

			if (Buffercmp(slave_rx_buffer, master_tx_buffer, READ_LEN)) {
 8000f00:	2205      	movs	r2, #5
 8000f02:	4920      	ldr	r1, [pc, #128]	; (8000f84 <main+0x1bc>)
 8000f04:	481e      	ldr	r0, [pc, #120]	; (8000f80 <main+0x1b8>)
 8000f06:	f000 f933 	bl	8001170 <Buffercmp>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <main+0x154>
				hal_gpio_write_to_pin(GPIOD, LED_RED, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	210e      	movs	r1, #14
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <main+0x1b0>)
 8000f16:	f7ff fc50 	bl	80007ba <hal_gpio_write_to_pin>
 8000f1a:	e003      	b.n	8000f24 <main+0x15c>
			} else
				led_toggle(GPIOD, LED_BLUE);
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	4816      	ldr	r0, [pc, #88]	; (8000f78 <main+0x1b0>)
 8000f20:	f000 f86a 	bl	8000ff8 <led_toggle>
		}

		if (slave_rcv_cmd == MASTER_READ_CMD) {
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <main+0x1b4>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2bc2      	cmp	r3, #194	; 0xc2
 8000f2a:	d1b7      	bne.n	8000e9c <main+0xd4>
			//prepare to send data to the  master
			//first rcv no bytes to be written to master
			hal_i2c_slave_rx(&i2c_handle, &slave_rcv_cmd, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4913      	ldr	r1, [pc, #76]	; (8000f7c <main+0x1b4>)
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <main+0x1a4>)
 8000f32:	f7ff feec 	bl	8000d0e <hal_i2c_slave_rx>
			while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000f36:	bf00      	nop
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <main+0x1a4>)
 8000f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d1fa      	bne.n	8000f38 <main+0x170>
				;

			hal_i2c_slave_tx(&i2c_handle, slave_tx_buffer, slave_rcv_cmd);
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <main+0x1b4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	490f      	ldr	r1, [pc, #60]	; (8000f88 <main+0x1c0>)
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <main+0x1a4>)
 8000f4c:	f7ff fea1 	bl	8000c92 <hal_i2c_slave_tx>
			while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000f50:	bf00      	nop
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <main+0x1a4>)
 8000f54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d1fa      	bne.n	8000f52 <main+0x18a>
		while (i2c_handle.State != HAL_I2C_STATE_READY)
 8000f5c:	e79e      	b.n	8000e9c <main+0xd4>
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	20000084 	.word	0x20000084
 8000f68:	40003800 	.word	0x40003800
 8000f6c:	20000034 	.word	0x20000034
 8000f70:	40005400 	.word	0x40005400
 8000f74:	000186a0 	.word	0x000186a0
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	200000bc 	.word	0x200000bc
 8000f80:	2000007c 	.word	0x2000007c
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000008 	.word	0x20000008

08000f8c <led_init>:
	uint32_t cnt = 800000;
	while (cnt--)
		;
}

void led_init(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <led_init+0x64>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <led_init+0x64>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf.pin = LED_RED;
 8000f9e:	230e      	movs	r3, #14
 8000fa0:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIOD,&gpio_pin_conf);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <led_init+0x68>)
 8000fb8:	f7ff fc24 	bl	8000804 <hal_gpio_init>

	gpio_pin_conf.pin = LED_BLUE;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOD, &gpio_pin_conf);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <led_init+0x68>)
 8000fc6:	f7ff fc1d 	bl	8000804 <hal_gpio_init>

	gpio_pin_conf.pin = LED_ORANGE;
 8000fca:	230d      	movs	r3, #13
 8000fcc:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOD, &gpio_pin_conf);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <led_init+0x68>)
 8000fd4:	f7ff fc16 	bl	8000804 <hal_gpio_init>

	gpio_pin_conf.pin = LED_GREEN;
 8000fd8:	230c      	movs	r3, #12
 8000fda:	603b      	str	r3, [r7, #0]
	hal_gpio_init(GPIOD, &gpio_pin_conf);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <led_init+0x68>)
 8000fe2:	f7ff fc0f 	bl	8000804 <hal_gpio_init>

}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <led_toggle>:

void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
	if (hal_gpio_read_from_pin(GPIOx, pin))
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fbc1 	bl	8000790 <hal_gpio_read_from_pin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <led_toggle+0x2a>
		hal_gpio_write_to_pin(GPIOx, pin, 0);
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fbcd 	bl	80007ba <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}
 8001020:	e005      	b.n	800102e <led_toggle+0x36>
		hal_gpio_write_to_pin(GPIOx, pin, 1);
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fbc6 	bl	80007ba <hal_gpio_write_to_pin>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <i2c_gpio_init>:

void i2c_gpio_init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
	gpio_pin_conf_t i2c_pin;

	_HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <i2c_gpio_init+0x5c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <i2c_gpio_init+0x5c>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30

	i2c_pin.pin = I2C1_SCL_LINE;
 800104a:	2306      	movs	r3, #6
 800104c:	603b      	str	r3, [r7, #0]
	i2c_pin.mode = GPIO_PIN_ALT_FUN_MODE;
 800104e:	2302      	movs	r3, #2
 8001050:	607b      	str	r3, [r7, #4]
	i2c_pin.op_type = GPIO_PIN_OP_TYPE_OPENDRAIN;
 8001052:	2301      	movs	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
	i2c_pin.pull = GPIO_PIN_PULL_UP;
 8001056:	2301      	movs	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
	i2c_pin.speed = GPIO_PIN_SPEED_HIGH;
 800105a:	2302      	movs	r3, #2
 800105c:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOB, I2C1_SCL_LINE, GPIO_PIN_AF4_I2C123);
 800105e:	2204      	movs	r2, #4
 8001060:	2106      	movs	r1, #6
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <i2c_gpio_init+0x60>)
 8001064:	f7ff fb6c 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &i2c_pin);
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <i2c_gpio_init+0x60>)
 800106e:	f7ff fbc9 	bl	8000804 <hal_gpio_init>

	i2c_pin.pin = I2C1_SDA_LINE;	// need change only pin number another have got same configuration
 8001072:	2309      	movs	r3, #9
 8001074:	603b      	str	r3, [r7, #0]

	hal_gpio_set_alt_function(GPIOB, I2C1_SDA_LINE, GPIO_PIN_AF4_I2C123);
 8001076:	2204      	movs	r2, #4
 8001078:	2109      	movs	r1, #9
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <i2c_gpio_init+0x60>)
 800107c:	f7ff fb60 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &i2c_pin);
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <i2c_gpio_init+0x60>)
 8001086:	f7ff fbbd 	bl	8000804 <hal_gpio_init>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <spi_gpio_init>:

void spi_gpio_init(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
	gpio_pin_conf_t gpio_pin_conf;

	_HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <spi_gpio_init+0x7c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <spi_gpio_init+0x7c>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30

	/* configure GPIOI_PIN_1 for SPI CLK functionality */
	gpio_pin_conf.pin = SPI_CLK_PIN;
 80010ae:	230d      	movs	r3, #13
 80010b0:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_ALT_FUN_MODE;
 80010b2:	2302      	movs	r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_PUSH_DOWN;
 80010ba:	2302      	movs	r3, #2
 80010bc:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 80010be:	2301      	movs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]

	hal_gpio_set_alt_function(GPIOB, SPI_CLK_PIN, GPIO_PIN_AF5_SPI2);
 80010c2:	2205      	movs	r2, #5
 80010c4:	210d      	movs	r1, #13
 80010c6:	4815      	ldr	r0, [pc, #84]	; (800111c <spi_gpio_init+0x80>)
 80010c8:	f7ff fb3a 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB,&gpio_pin_conf);
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <spi_gpio_init+0x80>)
 80010d2:	f7ff fb97 	bl	8000804 <hal_gpio_init>

	/* configure GPIOI_PIN_2 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MISO_PIN;
 80010d6:	230e      	movs	r3, #14
 80010d8:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 80010da:	2301      	movs	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOB, SPI_MISO_PIN, GPIO_PIN_AF5_SPI2);
 80010de:	2205      	movs	r2, #5
 80010e0:	210e      	movs	r1, #14
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <spi_gpio_init+0x80>)
 80010e4:	f7ff fb2c 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &gpio_pin_conf);
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <spi_gpio_init+0x80>)
 80010ee:	f7ff fb89 	bl	8000804 <hal_gpio_init>

	/* configure GPIOI_PIN_3 for SPI MISO functionality */
	gpio_pin_conf.pin = SPI_MOSI_PIN;
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.pull = GPIO_PIN_PULL_UP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]

	hal_gpio_set_alt_function(GPIOB, SPI_MOSI_PIN, GPIO_PIN_AF5_SPI2);
 80010fa:	2205      	movs	r2, #5
 80010fc:	210f      	movs	r1, #15
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <spi_gpio_init+0x80>)
 8001100:	f7ff fb1e 	bl	8000740 <hal_gpio_set_alt_function>
	hal_gpio_init(GPIOB, &gpio_pin_conf);
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <spi_gpio_init+0x80>)
 800110a:	f7ff fb7b 	bl	8000804 <hal_gpio_init>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400

08001120 <button_init>:
		led_toggle(GPIOD, LED_RED);
		delay_gen();
	}
}

void button_init(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
	_HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <button_init+0x48>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <button_init+0x48>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
	gpio_pin_conf_t gpio_pin_conf;
	gpio_pin_conf.pin = GPIO_BUTTON_PIN;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
	gpio_pin_conf.mode = GPIO_PIN_INPUT_MODE;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
	gpio_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
	gpio_pin_conf.pull = GPIO_PIN_NO_PULL_PUSH;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	gpio_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 8001142:	2301      	movs	r3, #1
 8001144:	613b      	str	r3, [r7, #16]
	hal_gpio_init(GPIO_BUTTON_PORT, &gpio_pin_conf);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <button_init+0x4c>)
 800114c:	f7ff fb5a 	bl	8000804 <hal_gpio_init>

	//RCC->APB2ENR |= (1 << 14);
	//SYSCFG->EXTICR[0] &= (0b1111 << 12);
	hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_FALLING_EDGE);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fb84 	bl	8000860 <hal_gpio_configure_interrupt>
	hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI0_IRQn);
 8001158:	2106      	movs	r1, #6
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fbc6 	bl	80008ec <hal_gpio_enable_interrupt>
}
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <Buffercmp>:

static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 800117e:	e00d      	b.n	800119c <Buffercmp+0x2c>
  {
    if((*pBuffer1) != *pBuffer2)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <Buffercmp+0x20>
    {
      return BufferLength;
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	e00b      	b.n	80011a8 <Buffercmp+0x38>
    }
    pBuffer1++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3301      	adds	r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	80fa      	strh	r2, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1ec      	bne.n	8001180 <Buffercmp+0x10>
  }
	return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <EXTI0_IRQHandler>:
/*
 * @brief  brief  This function handles EXTI15-10 interrupt request.
 * @param  none
 * @retval none
 */
void EXTI0_IRQHandler(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fbb5 	bl	8000928 <hal_gpio_clear_interrupt>
	TestReady = SET;
 80011be:	4b02      	ldr	r3, [pc, #8]	; (80011c8 <EXTI0_IRQHandler+0x14>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000002c 	.word	0x2000002c

080011cc <SPI2_IRQHandler>:
/*
 * @brief  This function handles SPI2 interrupt request.
 * @param  none
 * @retval none
 */
void SPI2_IRQHandler(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	/* call the driver api to process this interrupt */
	hal_spi_irq_handler(&SpiHandle);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <SPI2_IRQHandler+0x10>)
 80011d2:	f7ff f9f9 	bl	80005c8 <hal_spi_irq_handler>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000084 	.word	0x20000084

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <SystemInit+0x28>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <SystemInit+0x28>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SystemInit+0x28>)
 80011f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fa:	609a      	str	r2, [r3, #8]
#endif
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001212:	e003      	b.n	800121c <LoopCopyDataInit>

08001214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121a:	3104      	adds	r1, #4

0800121c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001224:	d3f6      	bcc.n	8001214 <CopyDataInit>
  ldr  r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001228:	e002      	b.n	8001230 <LoopFillZerobss>

0800122a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800122c:	f842 3b04 	str.w	r3, [r2], #4

08001230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001234:	d3f9      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffd3 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f000 f811 	bl	8001260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fdc3 	bl	8000dc8 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001248:	080012d8 	.word	0x080012d8
  ldr  r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001250:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001254:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001258:	200000c0 	.word	0x200000c0

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <__libc_init_array>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	4d0d      	ldr	r5, [pc, #52]	; (8001298 <__libc_init_array+0x38>)
 8001264:	4c0d      	ldr	r4, [pc, #52]	; (800129c <__libc_init_array+0x3c>)
 8001266:	1b64      	subs	r4, r4, r5
 8001268:	10a4      	asrs	r4, r4, #2
 800126a:	2600      	movs	r6, #0
 800126c:	42a6      	cmp	r6, r4
 800126e:	d109      	bne.n	8001284 <__libc_init_array+0x24>
 8001270:	4d0b      	ldr	r5, [pc, #44]	; (80012a0 <__libc_init_array+0x40>)
 8001272:	4c0c      	ldr	r4, [pc, #48]	; (80012a4 <__libc_init_array+0x44>)
 8001274:	f000 f820 	bl	80012b8 <_init>
 8001278:	1b64      	subs	r4, r4, r5
 800127a:	10a4      	asrs	r4, r4, #2
 800127c:	2600      	movs	r6, #0
 800127e:	42a6      	cmp	r6, r4
 8001280:	d105      	bne.n	800128e <__libc_init_array+0x2e>
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	f855 3b04 	ldr.w	r3, [r5], #4
 8001288:	4798      	blx	r3
 800128a:	3601      	adds	r6, #1
 800128c:	e7ee      	b.n	800126c <__libc_init_array+0xc>
 800128e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001292:	4798      	blx	r3
 8001294:	3601      	adds	r6, #1
 8001296:	e7f2      	b.n	800127e <__libc_init_array+0x1e>
 8001298:	080012d0 	.word	0x080012d0
 800129c:	080012d0 	.word	0x080012d0
 80012a0:	080012d0 	.word	0x080012d0
 80012a4:	080012d4 	.word	0x080012d4

080012a8 <memset>:
 80012a8:	4402      	add	r2, r0
 80012aa:	4603      	mov	r3, r0
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d100      	bne.n	80012b2 <memset+0xa>
 80012b0:	4770      	bx	lr
 80012b2:	f803 1b01 	strb.w	r1, [r3], #1
 80012b6:	e7f9      	b.n	80012ac <memset+0x4>

080012b8 <_init>:
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ba:	bf00      	nop
 80012bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012be:	bc08      	pop	{r3}
 80012c0:	469e      	mov	lr, r3
 80012c2:	4770      	bx	lr

080012c4 <_fini>:
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	bf00      	nop
 80012c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ca:	bc08      	pop	{r3}
 80012cc:	469e      	mov	lr, r3
 80012ce:	4770      	bx	lr
